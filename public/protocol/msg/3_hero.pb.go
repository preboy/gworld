// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: 3_hero.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroLevelupRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *HeroLevelupRequest) Reset()                    { *m = HeroLevelupRequest{} }
func (m *HeroLevelupRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroLevelupRequest) ProtoMessage()               {}
func (*HeroLevelupRequest) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{0} }

func (m *HeroLevelupRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HeroLevelupResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
}

func (m *HeroLevelupResponse) Reset()                    { *m = HeroLevelupResponse{} }
func (m *HeroLevelupResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroLevelupResponse) ProtoMessage()               {}
func (*HeroLevelupResponse) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{1} }

func (m *HeroLevelupResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type HeroRefineRequest struct {
	Id   uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Flag uint32 `protobuf:"varint,2,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (m *HeroRefineRequest) Reset()                    { *m = HeroRefineRequest{} }
func (m *HeroRefineRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroRefineRequest) ProtoMessage()               {}
func (*HeroRefineRequest) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{2} }

func (m *HeroRefineRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HeroRefineRequest) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type HeroRefineResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    uint32 `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *HeroRefineResponse) Reset()                    { *m = HeroRefineResponse{} }
func (m *HeroRefineResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroRefineResponse) ProtoMessage()               {}
func (*HeroRefineResponse) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{3} }

func (m *HeroRefineResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *HeroRefineResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type HeroAptitudeRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *HeroAptitudeRequest) Reset()                    { *m = HeroAptitudeRequest{} }
func (m *HeroAptitudeRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroAptitudeRequest) ProtoMessage()               {}
func (*HeroAptitudeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{4} }

func (m *HeroAptitudeRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HeroAptitudeResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    uint32 `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *HeroAptitudeResponse) Reset()                    { *m = HeroAptitudeResponse{} }
func (m *HeroAptitudeResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroAptitudeResponse) ProtoMessage()               {}
func (*HeroAptitudeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{5} }

func (m *HeroAptitudeResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *HeroAptitudeResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type HeroTalentRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *HeroTalentRequest) Reset()                    { *m = HeroTalentRequest{} }
func (m *HeroTalentRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroTalentRequest) ProtoMessage()               {}
func (*HeroTalentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{6} }

func (m *HeroTalentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HeroTalentResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	Result    uint32 `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (m *HeroTalentResponse) Reset()                    { *m = HeroTalentResponse{} }
func (m *HeroTalentResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroTalentResponse) ProtoMessage()               {}
func (*HeroTalentResponse) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{7} }

func (m *HeroTalentResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *HeroTalentResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type HeroInfoUpdateResponse struct {
	Hero *Hero `protobuf:"bytes,1,opt,name=Hero" json:"Hero,omitempty"`
}

func (m *HeroInfoUpdateResponse) Reset()                    { *m = HeroInfoUpdateResponse{} }
func (m *HeroInfoUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroInfoUpdateResponse) ProtoMessage()               {}
func (*HeroInfoUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor3Hero, []int{8} }

func (m *HeroInfoUpdateResponse) GetHero() *Hero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroLevelupRequest)(nil), "msg.HeroLevelupRequest")
	proto.RegisterType((*HeroLevelupResponse)(nil), "msg.HeroLevelupResponse")
	proto.RegisterType((*HeroRefineRequest)(nil), "msg.HeroRefineRequest")
	proto.RegisterType((*HeroRefineResponse)(nil), "msg.HeroRefineResponse")
	proto.RegisterType((*HeroAptitudeRequest)(nil), "msg.HeroAptitudeRequest")
	proto.RegisterType((*HeroAptitudeResponse)(nil), "msg.HeroAptitudeResponse")
	proto.RegisterType((*HeroTalentRequest)(nil), "msg.HeroTalentRequest")
	proto.RegisterType((*HeroTalentResponse)(nil), "msg.HeroTalentResponse")
	proto.RegisterType((*HeroInfoUpdateResponse)(nil), "msg.HeroInfoUpdateResponse")
}
func (m *HeroLevelupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroLevelupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *HeroLevelupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroLevelupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *HeroRefineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRefineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Id))
	}
	if m.Flag != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Flag))
	}
	return i, nil
}

func (m *HeroRefineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRefineResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *HeroAptitudeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroAptitudeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *HeroAptitudeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroAptitudeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *HeroTalentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTalentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *HeroTalentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTalentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *HeroInfoUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroInfoUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarint3Hero(dAtA, i, uint64(m.Hero.Size()))
		n1, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarint3Hero(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroLevelupRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov3Hero(uint64(m.Id))
	}
	return n
}

func (m *HeroLevelupResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sov3Hero(uint64(m.ErrorCode))
	}
	return n
}

func (m *HeroRefineRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov3Hero(uint64(m.Id))
	}
	if m.Flag != 0 {
		n += 1 + sov3Hero(uint64(m.Flag))
	}
	return n
}

func (m *HeroRefineResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sov3Hero(uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		n += 1 + sov3Hero(uint64(m.Result))
	}
	return n
}

func (m *HeroAptitudeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov3Hero(uint64(m.Id))
	}
	return n
}

func (m *HeroAptitudeResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sov3Hero(uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		n += 1 + sov3Hero(uint64(m.Result))
	}
	return n
}

func (m *HeroTalentRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov3Hero(uint64(m.Id))
	}
	return n
}

func (m *HeroTalentResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sov3Hero(uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		n += 1 + sov3Hero(uint64(m.Result))
	}
	return n
}

func (m *HeroInfoUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sov3Hero(uint64(l))
	}
	return n
}

func sov3Hero(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func soz3Hero(x uint64) (n int) {
	return sov3Hero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroLevelupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroLevelupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroLevelupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroLevelupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroLevelupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroLevelupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroRefineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRefineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRefineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroRefineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRefineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRefineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroAptitudeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAptitudeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAptitudeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroAptitudeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroAptitudeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroAptitudeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTalentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTalentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTalentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTalentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTalentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTalentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroInfoUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroInfoUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroInfoUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength3Hero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &Hero{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip3Hero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength3Hero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skip3Hero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflow3Hero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow3Hero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLength3Hero
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflow3Hero
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skip3Hero(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLength3Hero = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflow3Hero   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("3_hero.proto", fileDescriptor3Hero) }

var fileDescriptor3Hero = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x31, 0x8e, 0xcf, 0x48,
	0x2d, 0xca, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0xe2, 0x31,
	0xd0, 0x2b, 0xa9, 0x2c, 0x48, 0x85, 0x08, 0x29, 0xa9, 0x70, 0x09, 0x79, 0xa4, 0x16, 0xe5, 0xfb,
	0xa4, 0x96, 0xa5, 0xe6, 0x94, 0x16, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71,
	0x31, 0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0x31, 0x79, 0xa6, 0x28, 0x19, 0x73,
	0x09, 0xa3, 0xa8, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe1, 0xe2, 0x74, 0x2d, 0x2a,
	0xca, 0x2f, 0x72, 0xce, 0x4f, 0x49, 0x85, 0xaa, 0x46, 0x08, 0x28, 0x99, 0x73, 0x09, 0x82, 0x34,
	0x05, 0xa5, 0xa6, 0x65, 0xe6, 0xa5, 0xe2, 0x30, 0x59, 0x48, 0x88, 0x8b, 0xc5, 0x2d, 0x27, 0x31,
	0x5d, 0x82, 0x09, 0x2c, 0x02, 0x66, 0x2b, 0x79, 0x41, 0xdc, 0x04, 0xd3, 0x48, 0x8c, 0x65, 0x42,
	0x62, 0x5c, 0x6c, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x50, 0x93, 0xa0, 0x3c, 0x25, 0x55, 0x88,
	0xcb, 0x1d, 0x0b, 0x4a, 0x32, 0x4b, 0x4a, 0x53, 0x70, 0x39, 0x43, 0xc9, 0x87, 0x4b, 0x04, 0x55,
	0x19, 0x45, 0x96, 0x2a, 0x43, 0x7c, 0x1e, 0x92, 0x98, 0x93, 0x9a, 0x57, 0x82, 0xcb, 0x4a, 0xa8,
	0x2f, 0x61, 0x8a, 0x28, 0xb2, 0xd0, 0x9c, 0x4b, 0x0c, 0x64, 0x96, 0x67, 0x5e, 0x5a, 0x7e, 0x68,
	0x41, 0x4a, 0x62, 0x09, 0xc2, 0x03, 0xb2, 0x5c, 0x2c, 0x20, 0x19, 0xb0, 0x51, 0xdc, 0x46, 0x9c,
	0x7a, 0xb9, 0xc5, 0xe9, 0x7a, 0xe0, 0xc0, 0x05, 0x0b, 0x3b, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xd3,
	0x85, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x75, 0x73, 0x57, 0x3a, 0x02, 0x00, 0x00,
}
