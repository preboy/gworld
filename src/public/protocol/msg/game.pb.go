// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

/*
	Package msg is a generated protocol buffer package.

	It is generated from these files:
		game.proto

	It has these top-level messages:
		PlayerDataRequest
		Item
		Equipment
		Skill
		Aura
		Hero
		PlayerDataResponse
		GMCommandRequest
		GMCommandResponse
		NoticeRequest
		NoticeResponse
		BattleSkill
		BattleAura
		BattleUnit
		CampaignDetail
		BattleCampaign
		BattleResult
		MakeBattleRequest
		MakeBattleResponse
		UseItemRequest
		UseItemResponse
		ItemCntInfo
		ItemCntChangedNotice
		MarketBuyRequest
		MarketBuyResponse
*/
package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlayerDataRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PlayerDataRequest) Reset()                    { *m = PlayerDataRequest{} }
func (m *PlayerDataRequest) String() string            { return proto.CompactTextString(m) }
func (*PlayerDataRequest) ProtoMessage()               {}
func (*PlayerDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{0} }

func (m *PlayerDataRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Item struct {
	Flag uint32 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cnt  int64  `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{1} }

func (m *Item) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Item) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type Equipment struct {
	Quality uint32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	Level   uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{2} }

func (m *Equipment) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Equipment) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Skill struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level    uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	EffectId uint32 `protobuf:"varint,3,opt,name=effectId,proto3" json:"effectId,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{3} }

func (m *Skill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Skill) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Skill) GetEffectId() uint32 {
	if m != nil {
		return m.EffectId
	}
	return 0
}

type Aura struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *Aura) Reset()                    { *m = Aura{} }
func (m *Aura) String() string            { return proto.CompactTextString(m) }
func (*Aura) ProtoMessage()               {}
func (*Aura) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{4} }

func (m *Aura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Aura) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Hero struct {
	Id         uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level      uint32       `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Quality    uint32       `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
	Power      uint32       `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`
	Equips     []*Equipment `protobuf:"bytes,5,rep,name=equips" json:"equips,omitempty"`
	Skills     []*Skill     `protobuf:"bytes,6,rep,name=skills" json:"skills,omitempty"`
	Auras      []*Aura      `protobuf:"bytes,7,rep,name=auras" json:"auras,omitempty"`
	Status     uint32       `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	StatusData uint32       `protobuf:"varint,9,opt,name=statusData,proto3" json:"statusData,omitempty"`
	Dead       bool         `protobuf:"varint,10,opt,name=dead,proto3" json:"dead,omitempty"`
}

func (m *Hero) Reset()                    { *m = Hero{} }
func (m *Hero) String() string            { return proto.CompactTextString(m) }
func (*Hero) ProtoMessage()               {}
func (*Hero) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{5} }

func (m *Hero) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hero) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Hero) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Hero) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Hero) GetEquips() []*Equipment {
	if m != nil {
		return m.Equips
	}
	return nil
}

func (m *Hero) GetSkills() []*Skill {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *Hero) GetAuras() []*Aura {
	if m != nil {
		return m.Auras
	}
	return nil
}

func (m *Hero) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hero) GetStatusData() uint32 {
	if m != nil {
		return m.StatusData
	}
	return 0
}

func (m *Hero) GetDead() bool {
	if m != nil {
		return m.Dead
	}
	return false
}

type PlayerDataResponse struct {
	Acct     string  `protobuf:"bytes,1,opt,name=acct,proto3" json:"acct,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pid      uint64  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Sid      uint32  `protobuf:"varint,4,opt,name=sid,proto3" json:"sid,omitempty"`
	Id       uint64  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Level    uint32  `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	VipLevel uint32  `protobuf:"varint,7,opt,name=vipLevel,proto3" json:"vipLevel,omitempty"`
	Male     bool    `protobuf:"varint,8,opt,name=male,proto3" json:"male,omitempty"`
	Items    []*Item `protobuf:"bytes,9,rep,name=items" json:"items,omitempty"`
	Heros    []*Hero `protobuf:"bytes,10,rep,name=heros" json:"heros,omitempty"`
	Auras    []*Aura `protobuf:"bytes,11,rep,name=auras" json:"auras,omitempty"`
}

func (m *PlayerDataResponse) Reset()                    { *m = PlayerDataResponse{} }
func (m *PlayerDataResponse) String() string            { return proto.CompactTextString(m) }
func (*PlayerDataResponse) ProtoMessage()               {}
func (*PlayerDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{6} }

func (m *PlayerDataResponse) GetAcct() string {
	if m != nil {
		return m.Acct
	}
	return ""
}

func (m *PlayerDataResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerDataResponse) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *PlayerDataResponse) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *PlayerDataResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerDataResponse) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerDataResponse) GetVipLevel() uint32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *PlayerDataResponse) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *PlayerDataResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlayerDataResponse) GetHeros() []*Hero {
	if m != nil {
		return m.Heros
	}
	return nil
}

func (m *PlayerDataResponse) GetAuras() []*Aura {
	if m != nil {
		return m.Auras
	}
	return nil
}

type GMCommandRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *GMCommandRequest) Reset()                    { *m = GMCommandRequest{} }
func (m *GMCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*GMCommandRequest) ProtoMessage()               {}
func (*GMCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{7} }

func (m *GMCommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type GMCommandResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GMCommandResponse) Reset()                    { *m = GMCommandResponse{} }
func (m *GMCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*GMCommandResponse) ProtoMessage()               {}
func (*GMCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{8} }

func (m *GMCommandResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type NoticeRequest struct {
	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Notice string `protobuf:"bytes,2,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (m *NoticeRequest) Reset()                    { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()               {}
func (*NoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{9} }

func (m *NoticeRequest) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *NoticeRequest) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type NoticeResponse struct {
	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Notice string `protobuf:"bytes,2,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (m *NoticeResponse) Reset()                    { *m = NoticeResponse{} }
func (m *NoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*NoticeResponse) ProtoMessage()               {}
func (*NoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{10} }

func (m *NoticeResponse) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *NoticeResponse) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type BattleSkill struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *BattleSkill) Reset()                    { *m = BattleSkill{} }
func (m *BattleSkill) String() string            { return proto.CompactTextString(m) }
func (*BattleSkill) ProtoMessage()               {}
func (*BattleSkill) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{11} }

func (m *BattleSkill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleSkill) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleAura struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *BattleAura) Reset()                    { *m = BattleAura{} }
func (m *BattleAura) String() string            { return proto.CompactTextString(m) }
func (*BattleAura) ProtoMessage()               {}
func (*BattleAura) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{12} }

func (m *BattleAura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleAura) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleUnit struct {
	Type               uint32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                 uint32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Lv                 uint32         `protobuf:"varint,3,opt,name=lv,proto3" json:"lv,omitempty"`
	Pos                uint32         `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
	Atk                uint32         `protobuf:"varint,5,opt,name=atk,proto3" json:"atk,omitempty"`
	Def                uint32         `protobuf:"varint,6,opt,name=def,proto3" json:"def,omitempty"`
	Hp                 uint32         `protobuf:"varint,7,opt,name=hp,proto3" json:"hp,omitempty"`
	Crit               uint32         `protobuf:"varint,8,opt,name=crit,proto3" json:"crit,omitempty"`
	CritHurt           uint32         `protobuf:"varint,9,opt,name=crit_hurt,json=critHurt,proto3" json:"crit_hurt,omitempty"`
	Comm               *BattleSkill   `protobuf:"bytes,10,opt,name=comm" json:"comm,omitempty"`
	Skill              []*BattleSkill `protobuf:"bytes,11,rep,name=skill" json:"skill,omitempty"`
	CareerGeneralSkill *BattleSkill   `protobuf:"bytes,12,opt,name=career_general_skill,json=careerGeneralSkill" json:"career_general_skill,omitempty"`
	CareerGeneralAura  *BattleAura    `protobuf:"bytes,13,opt,name=career_general_aura,json=careerGeneralAura" json:"career_general_aura,omitempty"`
	CareerGuarderAura  *BattleAura    `protobuf:"bytes,14,opt,name=career_guarder_aura,json=careerGuarderAura" json:"career_guarder_aura,omitempty"`
}

func (m *BattleUnit) Reset()                    { *m = BattleUnit{} }
func (m *BattleUnit) String() string            { return proto.CompactTextString(m) }
func (*BattleUnit) ProtoMessage()               {}
func (*BattleUnit) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{13} }

func (m *BattleUnit) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleUnit) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleUnit) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *BattleUnit) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BattleUnit) GetAtk() uint32 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *BattleUnit) GetDef() uint32 {
	if m != nil {
		return m.Def
	}
	return 0
}

func (m *BattleUnit) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *BattleUnit) GetCrit() uint32 {
	if m != nil {
		return m.Crit
	}
	return 0
}

func (m *BattleUnit) GetCritHurt() uint32 {
	if m != nil {
		return m.CritHurt
	}
	return 0
}

func (m *BattleUnit) GetComm() *BattleSkill {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *BattleUnit) GetSkill() []*BattleSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *BattleUnit) GetCareerGeneralSkill() *BattleSkill {
	if m != nil {
		return m.CareerGeneralSkill
	}
	return nil
}

func (m *BattleUnit) GetCareerGeneralAura() *BattleAura {
	if m != nil {
		return m.CareerGeneralAura
	}
	return nil
}

func (m *BattleUnit) GetCareerGuarderAura() *BattleAura {
	if m != nil {
		return m.CareerGuarderAura
	}
	return nil
}

type CampaignDetail struct {
	Host uint32 `protobuf:"varint,1,opt,name=host,proto3" json:"host,omitempty"`
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Flag uint32 `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	Arg1 int32  `protobuf:"varint,4,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 int32  `protobuf:"varint,5,opt,name=arg2,proto3" json:"arg2,omitempty"`
	Arg3 int32  `protobuf:"varint,6,opt,name=arg3,proto3" json:"arg3,omitempty"`
	Arg4 int32  `protobuf:"varint,7,opt,name=arg4,proto3" json:"arg4,omitempty"`
}

func (m *CampaignDetail) Reset()                    { *m = CampaignDetail{} }
func (m *CampaignDetail) String() string            { return proto.CompactTextString(m) }
func (*CampaignDetail) ProtoMessage()               {}
func (*CampaignDetail) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{14} }

func (m *CampaignDetail) GetHost() uint32 {
	if m != nil {
		return m.Host
	}
	return 0
}

func (m *CampaignDetail) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CampaignDetail) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *CampaignDetail) GetArg1() int32 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *CampaignDetail) GetArg2() int32 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

func (m *CampaignDetail) GetArg3() int32 {
	if m != nil {
		return m.Arg3
	}
	return 0
}

func (m *CampaignDetail) GetArg4() int32 {
	if m != nil {
		return m.Arg4
	}
	return 0
}

type BattleCampaign struct {
	APos    uint32            `protobuf:"varint,1,opt,name=a_pos,json=aPos,proto3" json:"a_pos,omitempty"`
	DPos    uint32            `protobuf:"varint,2,opt,name=d_pos,json=dPos,proto3" json:"d_pos,omitempty"`
	AHpS    uint32            `protobuf:"varint,3,opt,name=a_hp_s,json=aHpS,proto3" json:"a_hp_s,omitempty"`
	DHpS    uint32            `protobuf:"varint,4,opt,name=d_hp_s,json=dHpS,proto3" json:"d_hp_s,omitempty"`
	AHpE    uint32            `protobuf:"varint,5,opt,name=a_hp_e,json=aHpE,proto3" json:"a_hp_e,omitempty"`
	DHpE    uint32            `protobuf:"varint,6,opt,name=d_hp_e,json=dHpE,proto3" json:"d_hp_e,omitempty"`
	Details []*CampaignDetail `protobuf:"bytes,7,rep,name=details" json:"details,omitempty"`
}

func (m *BattleCampaign) Reset()                    { *m = BattleCampaign{} }
func (m *BattleCampaign) String() string            { return proto.CompactTextString(m) }
func (*BattleCampaign) ProtoMessage()               {}
func (*BattleCampaign) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{15} }

func (m *BattleCampaign) GetAPos() uint32 {
	if m != nil {
		return m.APos
	}
	return 0
}

func (m *BattleCampaign) GetDPos() uint32 {
	if m != nil {
		return m.DPos
	}
	return 0
}

func (m *BattleCampaign) GetAHpS() uint32 {
	if m != nil {
		return m.AHpS
	}
	return 0
}

func (m *BattleCampaign) GetDHpS() uint32 {
	if m != nil {
		return m.DHpS
	}
	return 0
}

func (m *BattleCampaign) GetAHpE() uint32 {
	if m != nil {
		return m.AHpE
	}
	return 0
}

func (m *BattleCampaign) GetDHpE() uint32 {
	if m != nil {
		return m.DHpE
	}
	return 0
}

func (m *BattleCampaign) GetDetails() []*CampaignDetail {
	if m != nil {
		return m.Details
	}
	return nil
}

type BattleResult struct {
	Units []*BattleUnit     `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
	Camps []*BattleCampaign `protobuf:"bytes,2,rep,name=camps" json:"camps,omitempty"`
	Win   bool              `protobuf:"varint,3,opt,name=win,proto3" json:"win,omitempty"`
}

func (m *BattleResult) Reset()                    { *m = BattleResult{} }
func (m *BattleResult) String() string            { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()               {}
func (*BattleResult) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{16} }

func (m *BattleResult) GetUnits() []*BattleUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *BattleResult) GetCamps() []*BattleCampaign {
	if m != nil {
		return m.Camps
	}
	return nil
}

func (m *BattleResult) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

type MakeBattleRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MakeBattleRequest) Reset()                    { *m = MakeBattleRequest{} }
func (m *MakeBattleRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeBattleRequest) ProtoMessage()               {}
func (*MakeBattleRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{17} }

func (m *MakeBattleRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MakeBattleResponse struct {
	Result *BattleResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MakeBattleResponse) Reset()                    { *m = MakeBattleResponse{} }
func (m *MakeBattleResponse) String() string            { return proto.CompactTextString(m) }
func (*MakeBattleResponse) ProtoMessage()               {}
func (*MakeBattleResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{18} }

func (m *MakeBattleResponse) GetResult() *BattleResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// 使用道具
type UseItemRequest struct {
	Id  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cnt uint32 `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *UseItemRequest) Reset()                    { *m = UseItemRequest{} }
func (m *UseItemRequest) String() string            { return proto.CompactTextString(m) }
func (*UseItemRequest) ProtoMessage()               {}
func (*UseItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{19} }

func (m *UseItemRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UseItemRequest) GetCnt() uint32 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type UseItemResponse struct {
	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UseItemResponse) Reset()                    { *m = UseItemResponse{} }
func (m *UseItemResponse) String() string            { return proto.CompactTextString(m) }
func (*UseItemResponse) ProtoMessage()               {}
func (*UseItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{20} }

func (m *UseItemResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ItemCntInfo struct {
	Add uint32 `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id  uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cnt uint64 `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *ItemCntInfo) Reset()                    { *m = ItemCntInfo{} }
func (m *ItemCntInfo) String() string            { return proto.CompactTextString(m) }
func (*ItemCntInfo) ProtoMessage()               {}
func (*ItemCntInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{21} }

func (m *ItemCntInfo) GetAdd() uint32 {
	if m != nil {
		return m.Add
	}
	return 0
}

func (m *ItemCntInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemCntInfo) GetCnt() uint64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type ItemCntChangedNotice struct {
	Info []*ItemCntInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ItemCntChangedNotice) Reset()                    { *m = ItemCntChangedNotice{} }
func (m *ItemCntChangedNotice) String() string            { return proto.CompactTextString(m) }
func (*ItemCntChangedNotice) ProtoMessage()               {}
func (*ItemCntChangedNotice) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{22} }

func (m *ItemCntChangedNotice) GetInfo() []*ItemCntInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type MarketBuyRequest struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *MarketBuyRequest) Reset()                    { *m = MarketBuyRequest{} }
func (m *MarketBuyRequest) String() string            { return proto.CompactTextString(m) }
func (*MarketBuyRequest) ProtoMessage()               {}
func (*MarketBuyRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{23} }

func (m *MarketBuyRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MarketBuyRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MarketBuyResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *MarketBuyResponse) Reset()                    { *m = MarketBuyResponse{} }
func (m *MarketBuyResponse) String() string            { return proto.CompactTextString(m) }
func (*MarketBuyResponse) ProtoMessage()               {}
func (*MarketBuyResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{24} }

func (m *MarketBuyResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerDataRequest)(nil), "msg.PlayerDataRequest")
	proto.RegisterType((*Item)(nil), "msg.Item")
	proto.RegisterType((*Equipment)(nil), "msg.Equipment")
	proto.RegisterType((*Skill)(nil), "msg.Skill")
	proto.RegisterType((*Aura)(nil), "msg.Aura")
	proto.RegisterType((*Hero)(nil), "msg.Hero")
	proto.RegisterType((*PlayerDataResponse)(nil), "msg.PlayerDataResponse")
	proto.RegisterType((*GMCommandRequest)(nil), "msg.GMCommandRequest")
	proto.RegisterType((*GMCommandResponse)(nil), "msg.GMCommandResponse")
	proto.RegisterType((*NoticeRequest)(nil), "msg.NoticeRequest")
	proto.RegisterType((*NoticeResponse)(nil), "msg.NoticeResponse")
	proto.RegisterType((*BattleSkill)(nil), "msg.BattleSkill")
	proto.RegisterType((*BattleAura)(nil), "msg.BattleAura")
	proto.RegisterType((*BattleUnit)(nil), "msg.BattleUnit")
	proto.RegisterType((*CampaignDetail)(nil), "msg.CampaignDetail")
	proto.RegisterType((*BattleCampaign)(nil), "msg.BattleCampaign")
	proto.RegisterType((*BattleResult)(nil), "msg.BattleResult")
	proto.RegisterType((*MakeBattleRequest)(nil), "msg.MakeBattleRequest")
	proto.RegisterType((*MakeBattleResponse)(nil), "msg.MakeBattleResponse")
	proto.RegisterType((*UseItemRequest)(nil), "msg.UseItemRequest")
	proto.RegisterType((*UseItemResponse)(nil), "msg.UseItemResponse")
	proto.RegisterType((*ItemCntInfo)(nil), "msg.ItemCntInfo")
	proto.RegisterType((*ItemCntChangedNotice)(nil), "msg.ItemCntChangedNotice")
	proto.RegisterType((*MarketBuyRequest)(nil), "msg.MarketBuyRequest")
	proto.RegisterType((*MarketBuyResponse)(nil), "msg.MarketBuyResponse")
}
func (m *PlayerDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *Equipment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equipment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Quality != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Quality))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Skill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Skill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.EffectId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.EffectId))
	}
	return i, nil
}

func (m *Aura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Hero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hero) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Quality))
	}
	if m.Power != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
	}
	if len(m.Equips) > 0 {
		for _, msg := range m.Equips {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Skills) > 0 {
		for _, msg := range m.Skills {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Auras) > 0 {
		for _, msg := range m.Auras {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
	}
	if m.StatusData != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.StatusData))
	}
	if m.Dead {
		dAtA[i] = 0x50
		i++
		if m.Dead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PlayerDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Acct) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Acct)))
		i += copy(dAtA[i:], m.Acct)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Pid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pid))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Sid))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.VipLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.VipLevel))
	}
	if m.Male {
		dAtA[i] = 0x40
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0x52
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Auras) > 0 {
		for _, msg := range m.Auras {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GMCommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMCommandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	return i, nil
}

func (m *GMCommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMCommandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *NoticeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *NoticeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *BattleSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleAura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleAura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos))
	}
	if m.Atk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Atk))
	}
	if m.Def != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Def))
	}
	if m.Hp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Hp))
	}
	if m.Crit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Crit))
	}
	if m.CritHurt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.CritHurt))
	}
	if m.Comm != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Comm.Size()))
		n1, err := m.Comm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Skill) > 0 {
		for _, msg := range m.Skill {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CareerGeneralSkill != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.CareerGeneralSkill.Size()))
		n2, err := m.CareerGeneralSkill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.CareerGeneralAura != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.CareerGeneralAura.Size()))
		n3, err := m.CareerGeneralAura.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.CareerGuarderAura != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.CareerGuarderAura.Size()))
		n4, err := m.CareerGuarderAura.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CampaignDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CampaignDetail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Host != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Host))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Time))
	}
	if m.Flag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if m.Arg1 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg4))
	}
	return i, nil
}

func (m *BattleCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleCampaign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.APos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.APos))
	}
	if m.DPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DPos))
	}
	if m.AHpS != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.AHpS))
	}
	if m.DHpS != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DHpS))
	}
	if m.AHpE != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.AHpE))
	}
	if m.DHpE != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DHpE))
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Camps) > 0 {
		for _, msg := range m.Camps {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Win {
		dAtA[i] = 0x18
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MakeBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MakeBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UseItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *UseItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ItemCntInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemCntInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Add != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Add))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *ItemCntChangedNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemCntChangedNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MarketBuyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketBuyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Index))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *MarketBuyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketBuyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerDataRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	return n
}

func (m *Item) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	return n
}

func (m *Equipment) Size() (n int) {
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovGame(uint64(m.Quality))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	return n
}

func (m *Skill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.EffectId != 0 {
		n += 1 + sovGame(uint64(m.EffectId))
	}
	return n
}

func (m *Aura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	return n
}

func (m *Hero) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.Quality != 0 {
		n += 1 + sovGame(uint64(m.Quality))
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if len(m.Equips) > 0 {
		for _, e := range m.Equips {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Skills) > 0 {
		for _, e := range m.Skills {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Auras) > 0 {
		for _, e := range m.Auras {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	if m.StatusData != 0 {
		n += 1 + sovGame(uint64(m.StatusData))
	}
	if m.Dead {
		n += 2
	}
	return n
}

func (m *PlayerDataResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Acct)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Pid != 0 {
		n += 1 + sovGame(uint64(m.Pid))
	}
	if m.Sid != 0 {
		n += 1 + sovGame(uint64(m.Sid))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.VipLevel != 0 {
		n += 1 + sovGame(uint64(m.VipLevel))
	}
	if m.Male {
		n += 2
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Auras) > 0 {
		for _, e := range m.Auras {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *GMCommandRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *GMCommandResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	return n
}

func (m *NoticeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *NoticeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *BattleSkill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	return n
}

func (m *BattleAura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	return n
}

func (m *BattleUnit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGame(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	if m.Pos != 0 {
		n += 1 + sovGame(uint64(m.Pos))
	}
	if m.Atk != 0 {
		n += 1 + sovGame(uint64(m.Atk))
	}
	if m.Def != 0 {
		n += 1 + sovGame(uint64(m.Def))
	}
	if m.Hp != 0 {
		n += 1 + sovGame(uint64(m.Hp))
	}
	if m.Crit != 0 {
		n += 1 + sovGame(uint64(m.Crit))
	}
	if m.CritHurt != 0 {
		n += 1 + sovGame(uint64(m.CritHurt))
	}
	if m.Comm != nil {
		l = m.Comm.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.CareerGeneralSkill != nil {
		l = m.CareerGeneralSkill.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.CareerGeneralAura != nil {
		l = m.CareerGeneralAura.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.CareerGuarderAura != nil {
		l = m.CareerGuarderAura.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *CampaignDetail) Size() (n int) {
	var l int
	_ = l
	if m.Host != 0 {
		n += 1 + sovGame(uint64(m.Host))
	}
	if m.Time != 0 {
		n += 1 + sovGame(uint64(m.Time))
	}
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	if m.Arg1 != 0 {
		n += 1 + sovGame(uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		n += 1 + sovGame(uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		n += 1 + sovGame(uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		n += 1 + sovGame(uint64(m.Arg4))
	}
	return n
}

func (m *BattleCampaign) Size() (n int) {
	var l int
	_ = l
	if m.APos != 0 {
		n += 1 + sovGame(uint64(m.APos))
	}
	if m.DPos != 0 {
		n += 1 + sovGame(uint64(m.DPos))
	}
	if m.AHpS != 0 {
		n += 1 + sovGame(uint64(m.AHpS))
	}
	if m.DHpS != 0 {
		n += 1 + sovGame(uint64(m.DHpS))
	}
	if m.AHpE != 0 {
		n += 1 + sovGame(uint64(m.AHpE))
	}
	if m.DHpE != 0 {
		n += 1 + sovGame(uint64(m.DHpE))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *BattleResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Camps) > 0 {
		for _, e := range m.Camps {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Win {
		n += 2
	}
	return n
}

func (m *MakeBattleRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	return n
}

func (m *MakeBattleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *UseItemRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	return n
}

func (m *UseItemResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	return n
}

func (m *ItemCntInfo) Size() (n int) {
	var l int
	_ = l
	if m.Add != 0 {
		n += 1 + sovGame(uint64(m.Add))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	return n
}

func (m *ItemCntChangedNotice) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *MarketBuyRequest) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGame(uint64(m.Index))
	}
	if m.Count != 0 {
		n += 1 + sovGame(uint64(m.Count))
	}
	return n
}

func (m *MarketBuyResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovGame(uint64(m.ErrorCode))
	}
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equipment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equipment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equipment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Skill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Skill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Skill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			m.EffectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equips = append(m.Equips, &Equipment{})
			if err := m.Equips[len(m.Equips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = append(m.Skills, &Skill{})
			if err := m.Skills[len(m.Skills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auras", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auras = append(m.Auras, &Aura{})
			if err := m.Auras[len(m.Auras)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusData", wireType)
			}
			m.StatusData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusData |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dead = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &Hero{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auras", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auras = append(m.Auras, &Aura{})
			if err := m.Auras[len(m.Auras)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMCommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMCommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMCommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMCommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMCommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMCommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleAura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleAura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleAura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			m.Atk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Def", wireType)
			}
			m.Def = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Def |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crit", wireType)
			}
			m.Crit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CritHurt", wireType)
			}
			m.CritHurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CritHurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comm == nil {
				m.Comm = &BattleSkill{}
			}
			if err := m.Comm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &BattleSkill{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CareerGeneralSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CareerGeneralSkill == nil {
				m.CareerGeneralSkill = &BattleSkill{}
			}
			if err := m.CareerGeneralSkill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CareerGeneralAura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CareerGeneralAura == nil {
				m.CareerGeneralAura = &BattleAura{}
			}
			if err := m.CareerGeneralAura.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CareerGuarderAura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CareerGuarderAura == nil {
				m.CareerGuarderAura = &BattleAura{}
			}
			if err := m.CareerGuarderAura.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CampaignDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CampaignDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CampaignDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			m.Host = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Host |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			m.Arg2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg3", wireType)
			}
			m.Arg3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg4", wireType)
			}
			m.Arg4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg4 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field APos", wireType)
			}
			m.APos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.APos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DPos", wireType)
			}
			m.DPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AHpS", wireType)
			}
			m.AHpS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AHpS |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHpS", wireType)
			}
			m.DHpS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DHpS |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AHpE", wireType)
			}
			m.AHpE = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AHpE |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHpE", wireType)
			}
			m.DHpE = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DHpE |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &CampaignDetail{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &BattleUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Camps = append(m.Camps, &BattleCampaign{})
			if err := m.Camps[len(m.Camps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BattleResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemCntInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemCntInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemCntInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemCntChangedNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemCntChangedNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemCntChangedNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ItemCntInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketBuyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketBuyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketBuyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketBuyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketBuyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketBuyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game.proto", fileDescriptorGame) }

var fileDescriptorGame = []byte{
	// 1099 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x6e, 0x1b, 0xb7,
	0x13, 0xfe, 0x49, 0xda, 0x95, 0xa5, 0x51, 0xa4, 0xc8, 0x8c, 0x11, 0x2c, 0x7e, 0x45, 0x5d, 0x63,
	0xdb, 0x06, 0x36, 0xea, 0x18, 0xa8, 0x9c, 0x5b, 0x8c, 0x06, 0xb1, 0x63, 0xc4, 0x06, 0xea, 0x22,
	0x60, 0x90, 0xb3, 0xc0, 0xee, 0x52, 0xd2, 0xc2, 0xfb, 0xcf, 0x5c, 0xae, 0x53, 0xbf, 0x45, 0x2f,
	0x3d, 0x14, 0xe8, 0xcb, 0xf4, 0x56, 0xa0, 0x97, 0x3e, 0x42, 0xe1, 0xbe, 0x48, 0x31, 0x43, 0x52,
	0x5e, 0xdb, 0x6a, 0xe0, 0x93, 0x86, 0x1f, 0xbf, 0x1d, 0x72, 0xbe, 0xf9, 0x23, 0x02, 0xcc, 0x45,
	0x26, 0xf7, 0x4a, 0x55, 0xe8, 0x82, 0x75, 0xb2, 0x6a, 0x1e, 0x7e, 0x09, 0xeb, 0xef, 0x52, 0x71,
	0x25, 0xd5, 0x1b, 0xa1, 0x05, 0x97, 0x17, 0xb5, 0xac, 0x34, 0x1b, 0x41, 0x3b, 0x89, 0x83, 0xd6,
	0x56, 0x6b, 0xdb, 0xe3, 0xed, 0x24, 0x0e, 0x0f, 0xc0, 0x3b, 0xd5, 0x32, 0x63, 0x0c, 0xbc, 0x59,
	0x2a, 0xe6, 0xb4, 0x33, 0xe4, 0x64, 0x5b, 0x6e, 0x9b, 0x90, 0x76, 0x12, 0xb3, 0x31, 0x74, 0xa2,
	0x5c, 0x07, 0x9d, 0xad, 0xd6, 0x76, 0x87, 0xa3, 0x19, 0xbe, 0x84, 0xfe, 0xf1, 0x45, 0x9d, 0x94,
	0x99, 0xcc, 0x35, 0x0b, 0x60, 0xed, 0xa2, 0x16, 0x69, 0xa2, 0xaf, 0xac, 0x17, 0xb7, 0x64, 0x1b,
	0xe0, 0xa7, 0xf2, 0x52, 0xa6, 0xd6, 0x97, 0x59, 0x84, 0xa7, 0xe0, 0xbf, 0x3f, 0x4f, 0xd2, 0xb4,
	0x71, 0x27, 0x73, 0xce, 0x4a, 0x3a, 0xfb, 0x3f, 0xf4, 0xe4, 0x6c, 0x26, 0x23, 0x7d, 0x1a, 0xd3,
	0x15, 0x86, 0x7c, 0xb9, 0x0e, 0x77, 0xc1, 0x7b, 0x5d, 0x2b, 0xf1, 0x30, 0x4f, 0xe1, 0x2f, 0x6d,
	0xf0, 0x4e, 0xa4, 0x2a, 0x1e, 0x78, 0x70, 0x23, 0xae, 0xce, 0xbd, 0xb8, 0xca, 0xe2, 0xa3, 0x54,
	0x81, 0x67, 0xf8, 0xb4, 0x60, 0xcf, 0xa0, 0x2b, 0x51, 0x94, 0x2a, 0xf0, 0xb7, 0x3a, 0xdb, 0x83,
	0xc9, 0x68, 0x2f, 0xab, 0xe6, 0x7b, 0x4b, 0x9d, 0xb8, 0xdd, 0x65, 0x21, 0x74, 0x2b, 0x8c, 0xbf,
	0x0a, 0xba, 0xc4, 0x03, 0xe2, 0x91, 0x24, 0xdc, 0xee, 0xb0, 0x2f, 0xc0, 0x17, 0xb5, 0x12, 0x55,
	0xb0, 0x46, 0x94, 0x3e, 0x51, 0x30, 0x54, 0x6e, 0x70, 0xf6, 0x14, 0xba, 0x95, 0x16, 0xba, 0xae,
	0x82, 0x1e, 0xdd, 0xc1, 0xae, 0xd8, 0x26, 0x80, 0xb1, 0x30, 0xf9, 0x41, 0x9f, 0xf6, 0x1a, 0x08,
	0xe6, 0x3b, 0x96, 0x22, 0x0e, 0x60, 0xab, 0xb5, 0xdd, 0xe3, 0x64, 0x87, 0xbf, 0xb6, 0x81, 0x35,
	0x2b, 0xa6, 0x2a, 0x8b, 0xbc, 0x92, 0x48, 0x15, 0x51, 0xa4, 0x49, 0xa7, 0x3e, 0x27, 0x1b, 0xb1,
	0x5c, 0x64, 0x92, 0x84, 0xea, 0x73, 0xb2, 0xb1, 0x3c, 0xca, 0xc4, 0xe4, 0xc6, 0xe3, 0x68, 0x22,
	0x52, 0x25, 0xb1, 0x55, 0x07, 0x4d, 0xab, 0xb8, 0xef, 0xca, 0xef, 0x46, 0xf1, 0xee, 0x9d, 0x54,
	0x5f, 0x26, 0xe5, 0xf7, 0xb4, 0xb1, 0x66, 0x52, 0xed, 0xd6, 0x78, 0x72, 0x26, 0x52, 0x49, 0xe1,
	0xf6, 0x38, 0xd9, 0xa8, 0x52, 0xa2, 0x65, 0x56, 0x05, 0xfd, 0x86, 0x4a, 0x58, 0xd6, 0xdc, 0xe0,
	0x48, 0x58, 0x48, 0x55, 0x54, 0x01, 0x34, 0x08, 0x58, 0x02, 0xdc, 0xe0, 0x37, 0x3a, 0x0f, 0x56,
	0xeb, 0x1c, 0xee, 0xc2, 0xf8, 0xed, 0xd9, 0x51, 0x91, 0x65, 0x22, 0x8f, 0x5d, 0x2f, 0x05, 0xb0,
	0x16, 0x19, 0xc4, 0x6a, 0xe3, 0x96, 0xe1, 0x37, 0xb0, 0xde, 0x60, 0x5b, 0x1d, 0x9f, 0x42, 0x57,
	0xc9, 0xaa, 0x4e, 0x8d, 0x92, 0x3e, 0xb7, 0xab, 0xf0, 0x25, 0x0c, 0x7f, 0x28, 0x74, 0x12, 0x49,
	0xe7, 0xb7, 0xd9, 0x8b, 0xbe, 0xed, 0xc5, 0xa7, 0xd0, 0xcd, 0x89, 0x64, 0x25, 0xb7, 0xab, 0xf0,
	0x00, 0x46, 0xee, 0xe3, 0x9b, 0x74, 0x3d, 0xf8, 0xeb, 0xe7, 0x30, 0x38, 0x14, 0x5a, 0xa7, 0x72,
	0x75, 0x23, 0x8e, 0xa0, 0x9d, 0x5e, 0xba, 0x01, 0x90, 0x5e, 0x86, 0xbb, 0x00, 0x86, 0xbe, 0xb2,
	0xd9, 0xee, 0xb2, 0xff, 0xec, 0x38, 0xfa, 0x87, 0x3c, 0xa1, 0xa8, 0xf4, 0x55, 0x29, 0xdd, 0x84,
	0x41, 0xfb, 0xde, 0x84, 0x31, 0x2e, 0x3a, 0xce, 0x05, 0x95, 0x54, 0x51, 0xb9, 0x02, 0x2a, 0x8b,
	0x0a, 0x11, 0xa1, 0xcf, 0xa9, 0x82, 0x86, 0x1c, 0x4d, 0x44, 0x62, 0x39, 0xb3, 0x05, 0x84, 0x26,
	0x7a, 0x59, 0x94, 0xb6, 0x70, 0xda, 0x8b, 0x12, 0x4f, 0x8e, 0x54, 0xa2, 0x6d, 0x87, 0x90, 0xcd,
	0x3e, 0x83, 0x3e, 0xfe, 0x4e, 0x17, 0xb5, 0xd2, 0xb6, 0x3d, 0x7a, 0x08, 0x9c, 0xd4, 0x4a, 0xb3,
	0xaf, 0xc0, 0xc3, 0x4c, 0x52, 0x73, 0x0c, 0x26, 0x63, 0x2a, 0x86, 0x86, 0x4e, 0x9c, 0x76, 0xd9,
	0x33, 0xf0, 0xa9, 0x4b, 0x6d, 0xcd, 0xdc, 0xa7, 0x99, 0x6d, 0x76, 0x08, 0x1b, 0x91, 0x50, 0x52,
	0xaa, 0xe9, 0x5c, 0xe6, 0x52, 0x89, 0x74, 0x6a, 0x3e, 0x7b, 0xf4, 0x1f, 0xde, 0x99, 0x61, 0xbf,
	0x35, 0x64, 0x93, 0x99, 0x57, 0xf0, 0xe4, 0x8e, 0x0f, 0x2c, 0xcb, 0x60, 0x48, 0x2e, 0x1e, 0x37,
	0x5c, 0x50, 0xcd, 0xae, 0xdf, 0xf2, 0x40, 0xc9, 0x6a, 0x38, 0xa8, 0x85, 0x8a, 0xa5, 0x32, 0x0e,
	0x46, 0x9f, 0x76, 0x60, 0xa8, 0x08, 0x85, 0xbf, 0xb5, 0x60, 0x74, 0x24, 0xb2, 0x52, 0x24, 0xf3,
	0xfc, 0x8d, 0xd4, 0x22, 0xa1, 0x56, 0x5c, 0x14, 0x95, 0x76, 0x19, 0x45, 0x9b, 0xb2, 0x9c, 0xd8,
	0xc1, 0x80, 0x59, 0x4e, 0xb2, 0x9b, 0x8a, 0xec, 0x34, 0xfe, 0x5b, 0x70, 0xa8, 0xa8, 0xf9, 0xb7,
	0x94, 0x5a, 0x9f, 0x93, 0x6d, 0xb1, 0x09, 0x25, 0xd7, 0x60, 0x13, 0x8b, 0xed, 0x53, 0x7a, 0x0d,
	0xb6, 0x6f, 0xb1, 0x17, 0x94, 0x61, 0x83, 0xbd, 0x08, 0x7f, 0x6f, 0xc1, 0xc8, 0x04, 0xe0, 0x2e,
	0xc9, 0x9e, 0x80, 0x2f, 0xa6, 0x58, 0x3e, 0xf6, 0x7e, 0xe2, 0x5d, 0x51, 0x21, 0x18, 0x13, 0x68,
	0x2f, 0x18, 0x23, 0xb8, 0x01, 0x5d, 0x31, 0x5d, 0x94, 0xd3, 0xca, 0x5d, 0x51, 0x9c, 0x94, 0xef,
	0x11, 0x8d, 0x0d, 0xea, 0x59, 0xae, 0x45, 0x89, 0x2b, 0x6d, 0x0d, 0x22, 0xf7, 0x78, 0xc9, 0x95,
	0xb6, 0x0e, 0x91, 0x7b, 0xcc, 0x9e, 0xc3, 0x5a, 0x4c, 0x52, 0xb9, 0xf9, 0xfd, 0x84, 0x84, 0xbe,
	0x2d, 0x23, 0x77, 0x9c, 0x50, 0xc1, 0x23, 0x13, 0x02, 0xa7, 0xc1, 0xc0, 0xbe, 0x06, 0xbf, 0xce,
	0x13, 0x8d, 0x01, 0x74, 0xee, 0x64, 0x09, 0x3b, 0x8a, 0x9b, 0x5d, 0xb6, 0x03, 0x7e, 0x24, 0xb2,
	0x12, 0x43, 0xba, 0x39, 0xe3, 0xb6, 0x16, 0xdc, 0x30, 0xb0, 0x57, 0x3e, 0x26, 0x39, 0x45, 0xd9,
	0xe3, 0x68, 0xe2, 0x23, 0xe1, 0x4c, 0x9c, 0x4b, 0x77, 0xee, 0xdd, 0x47, 0x02, 0xb5, 0x65, 0xf8,
	0x0a, 0x58, 0x93, 0x64, 0x07, 0xcd, 0xce, 0xad, 0x79, 0x36, 0x98, 0xac, 0x37, 0x0e, 0x36, 0x11,
	0x2c, 0x47, 0xdc, 0x04, 0x46, 0x1f, 0x2a, 0x49, 0x13, 0x79, 0xf5, 0x11, 0xee, 0x6d, 0x61, 0xb2,
	0x42, 0x6f, 0x8b, 0x1d, 0x78, 0xbc, 0xfc, 0x66, 0xe5, 0x04, 0x1d, 0x2e, 0xdd, 0xbf, 0x86, 0x01,
	0xf2, 0x8e, 0x72, 0x7d, 0x9a, 0xcf, 0x0a, 0x9a, 0x11, 0xb1, 0x73, 0x8e, 0xe6, 0xa7, 0x5e, 0x32,
	0x9e, 0x39, 0xed, 0x00, 0x36, 0xac, 0x8b, 0xa3, 0x85, 0xc8, 0xe7, 0x32, 0x36, 0x53, 0x15, 0x47,
	0x41, 0x92, 0xcf, 0x0a, 0x9b, 0x82, 0xf1, 0xf2, 0x9f, 0xc5, 0x9e, 0xc5, 0x69, 0x37, 0xfc, 0x0e,
	0xc6, 0x67, 0x42, 0x9d, 0x4b, 0x7d, 0x58, 0x5f, 0xb9, 0x08, 0x37, 0xc0, 0x4f, 0xf2, 0x58, 0xfe,
	0x64, 0xef, 0x61, 0x16, 0x88, 0x46, 0x45, 0x6d, 0x23, 0xf5, 0xb8, 0x59, 0x84, 0x13, 0xcc, 0xc2,
	0xf2, 0x7b, 0x1b, 0xed, 0xe7, 0x00, 0x52, 0xa9, 0x42, 0x4d, 0xa3, 0x22, 0x76, 0x63, 0xb3, 0x4f,
	0xc8, 0x51, 0x11, 0xcb, 0xc3, 0xf1, 0x1f, 0xd7, 0x9b, 0xad, 0xbf, 0xae, 0x37, 0x5b, 0x7f, 0x5f,
	0x6f, 0xb6, 0x7e, 0xfe, 0x67, 0xf3, 0x7f, 0x3f, 0x76, 0xe9, 0xf1, 0xb7, 0xff, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0x37, 0xb5, 0xcf, 0x0a, 0x0a, 0x00, 0x00,
}
