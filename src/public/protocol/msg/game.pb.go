// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

/*
	Package msg is a generated protocol buffer package.

	It is generated from these files:
		game.proto

	It has these top-level messages:
		PlayerDataRequest
		Item
		Skill
		Aura
		Hero
		PlayerDataResponse
		GMCommandRequest
		GMCommandResponse
		NoticeRequest
		NoticeResponse
		BattleSkill
		BattleAura
		BattleUnit
		BattleEventSkill
		BattleEventAura
		BattleEventHurt
		BattleEventAuraEffect
		BattleResult
		MakeBattleRequest
		MakeBattleResponse
		UseItemRequest
		UseItemResponse
		ItemCntInfo
		ItemCntChangedNotice
		MarketBuyRequest
		MarketBuyResponse
		HeroLevelupRequest
		HeroLevelupResponse
		HeroRefineRequest
		HeroRefineResponse
		HeroInfoUpdateResponse
*/
package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PlayerDataRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PlayerDataRequest) Reset()                    { *m = PlayerDataRequest{} }
func (m *PlayerDataRequest) String() string            { return proto.CompactTextString(m) }
func (*PlayerDataRequest) ProtoMessage()               {}
func (*PlayerDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{0} }

func (m *PlayerDataRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Item struct {
	Flag uint32 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cnt  int64  `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{1} }

func (m *Item) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Item) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type Skill struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{2} }

func (m *Skill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Skill) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Aura struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *Aura) Reset()                    { *m = Aura{} }
func (m *Aura) String() string            { return proto.CompactTextString(m) }
func (*Aura) ProtoMessage()               {}
func (*Aura) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{3} }

func (m *Aura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Aura) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Hero struct {
	Id           uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level        uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	RefineLv     uint32   `protobuf:"varint,3,opt,name=refineLv,proto3" json:"refineLv,omitempty"`
	RefineTimes  uint32   `protobuf:"varint,4,opt,name=refineTimes,proto3" json:"refineTimes,omitempty"`
	RefineSuper  bool     `protobuf:"varint,5,opt,name=refineSuper,proto3" json:"refineSuper,omitempty"`
	Active       []*Skill `protobuf:"bytes,6,rep,name=active" json:"active,omitempty"`
	Passive      []*Skill `protobuf:"bytes,7,rep,name=passive" json:"passive,omitempty"`
	Power        uint32   `protobuf:"varint,8,opt,name=power,proto3" json:"power,omitempty"`
	Status       uint32   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	LifePoint    uint32   `protobuf:"varint,10,opt,name=lifePoint,proto3" json:"lifePoint,omitempty"`
	LifePointMax uint32   `protobuf:"varint,11,opt,name=lifePointMax,proto3" json:"lifePointMax,omitempty"`
}

func (m *Hero) Reset()                    { *m = Hero{} }
func (m *Hero) String() string            { return proto.CompactTextString(m) }
func (*Hero) ProtoMessage()               {}
func (*Hero) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{4} }

func (m *Hero) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hero) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Hero) GetRefineLv() uint32 {
	if m != nil {
		return m.RefineLv
	}
	return 0
}

func (m *Hero) GetRefineTimes() uint32 {
	if m != nil {
		return m.RefineTimes
	}
	return 0
}

func (m *Hero) GetRefineSuper() bool {
	if m != nil {
		return m.RefineSuper
	}
	return false
}

func (m *Hero) GetActive() []*Skill {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Hero) GetPassive() []*Skill {
	if m != nil {
		return m.Passive
	}
	return nil
}

func (m *Hero) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Hero) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hero) GetLifePoint() uint32 {
	if m != nil {
		return m.LifePoint
	}
	return 0
}

func (m *Hero) GetLifePointMax() uint32 {
	if m != nil {
		return m.LifePointMax
	}
	return 0
}

type PlayerDataResponse struct {
	Acct     string  `protobuf:"bytes,1,opt,name=acct,proto3" json:"acct,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pid      string  `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Sid      uint32  `protobuf:"varint,4,opt,name=sid,proto3" json:"sid,omitempty"`
	Id       uint64  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Level    uint32  `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	VipLevel uint32  `protobuf:"varint,7,opt,name=vipLevel,proto3" json:"vipLevel,omitempty"`
	Male     bool    `protobuf:"varint,8,opt,name=male,proto3" json:"male,omitempty"`
	Items    []*Item `protobuf:"bytes,9,rep,name=items" json:"items,omitempty"`
	Heros    []*Hero `protobuf:"bytes,10,rep,name=heros" json:"heros,omitempty"`
	Auras    []*Aura `protobuf:"bytes,11,rep,name=auras" json:"auras,omitempty"`
}

func (m *PlayerDataResponse) Reset()                    { *m = PlayerDataResponse{} }
func (m *PlayerDataResponse) String() string            { return proto.CompactTextString(m) }
func (*PlayerDataResponse) ProtoMessage()               {}
func (*PlayerDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{5} }

func (m *PlayerDataResponse) GetAcct() string {
	if m != nil {
		return m.Acct
	}
	return ""
}

func (m *PlayerDataResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerDataResponse) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *PlayerDataResponse) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *PlayerDataResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerDataResponse) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerDataResponse) GetVipLevel() uint32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *PlayerDataResponse) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *PlayerDataResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlayerDataResponse) GetHeros() []*Hero {
	if m != nil {
		return m.Heros
	}
	return nil
}

func (m *PlayerDataResponse) GetAuras() []*Aura {
	if m != nil {
		return m.Auras
	}
	return nil
}

type GMCommandRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *GMCommandRequest) Reset()                    { *m = GMCommandRequest{} }
func (m *GMCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*GMCommandRequest) ProtoMessage()               {}
func (*GMCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{6} }

func (m *GMCommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type GMCommandResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GMCommandResponse) Reset()                    { *m = GMCommandResponse{} }
func (m *GMCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*GMCommandResponse) ProtoMessage()               {}
func (*GMCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{7} }

func (m *GMCommandResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type NoticeRequest struct {
	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Notice string `protobuf:"bytes,2,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (m *NoticeRequest) Reset()                    { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()               {}
func (*NoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{8} }

func (m *NoticeRequest) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *NoticeRequest) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type NoticeResponse struct {
	Flag   int32  `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
	Notice string `protobuf:"bytes,2,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (m *NoticeResponse) Reset()                    { *m = NoticeResponse{} }
func (m *NoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*NoticeResponse) ProtoMessage()               {}
func (*NoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{9} }

func (m *NoticeResponse) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *NoticeResponse) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type BattleSkill struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *BattleSkill) Reset()                    { *m = BattleSkill{} }
func (m *BattleSkill) String() string            { return proto.CompactTextString(m) }
func (*BattleSkill) ProtoMessage()               {}
func (*BattleSkill) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{10} }

func (m *BattleSkill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleSkill) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleAura struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *BattleAura) Reset()                    { *m = BattleAura{} }
func (m *BattleAura) String() string            { return proto.CompactTextString(m) }
func (*BattleAura) ProtoMessage()               {}
func (*BattleAura) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{11} }

func (m *BattleAura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleAura) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleUnit struct {
	Type     uint32         `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id       uint32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Lv       uint32         `protobuf:"varint,3,opt,name=lv,proto3" json:"lv,omitempty"`
	Pos      uint32         `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
	Attacker uint32         `protobuf:"varint,5,opt,name=attacker,proto3" json:"attacker,omitempty"`
	Apm      uint32         `protobuf:"varint,6,opt,name=apm,proto3" json:"apm,omitempty"`
	Atk      uint32         `protobuf:"varint,7,opt,name=atk,proto3" json:"atk,omitempty"`
	Def      uint32         `protobuf:"varint,8,opt,name=def,proto3" json:"def,omitempty"`
	Hp       uint32         `protobuf:"varint,9,opt,name=hp,proto3" json:"hp,omitempty"`
	Crit     uint32         `protobuf:"varint,10,opt,name=crit,proto3" json:"crit,omitempty"`
	Hurt     uint32         `protobuf:"varint,11,opt,name=hurt,proto3" json:"hurt,omitempty"`
	Comm     *BattleSkill   `protobuf:"bytes,12,opt,name=comm" json:"comm,omitempty"`
	Skill    []*BattleSkill `protobuf:"bytes,13,rep,name=skill" json:"skill,omitempty"`
}

func (m *BattleUnit) Reset()                    { *m = BattleUnit{} }
func (m *BattleUnit) String() string            { return proto.CompactTextString(m) }
func (*BattleUnit) ProtoMessage()               {}
func (*BattleUnit) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{12} }

func (m *BattleUnit) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleUnit) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleUnit) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *BattleUnit) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BattleUnit) GetAttacker() uint32 {
	if m != nil {
		return m.Attacker
	}
	return 0
}

func (m *BattleUnit) GetApm() uint32 {
	if m != nil {
		return m.Apm
	}
	return 0
}

func (m *BattleUnit) GetAtk() uint32 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *BattleUnit) GetDef() uint32 {
	if m != nil {
		return m.Def
	}
	return 0
}

func (m *BattleUnit) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *BattleUnit) GetCrit() uint32 {
	if m != nil {
		return m.Crit
	}
	return 0
}

func (m *BattleUnit) GetHurt() uint32 {
	if m != nil {
		return m.Hurt
	}
	return 0
}

func (m *BattleUnit) GetComm() *BattleSkill {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *BattleUnit) GetSkill() []*BattleSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

// 技能释放事件
type BattleEventSkill struct {
	Time    uint32       `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Caster  uint32       `protobuf:"varint,2,opt,name=caster,proto3" json:"caster,omitempty"`
	Skill   *BattleSkill `protobuf:"bytes,3,opt,name=skill" json:"skill,omitempty"`
	Targets []uint32     `protobuf:"varint,4,rep,packed,name=targets" json:"targets,omitempty"`
}

func (m *BattleEventSkill) Reset()                    { *m = BattleEventSkill{} }
func (m *BattleEventSkill) String() string            { return proto.CompactTextString(m) }
func (*BattleEventSkill) ProtoMessage()               {}
func (*BattleEventSkill) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{13} }

func (m *BattleEventSkill) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventSkill) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventSkill) GetSkill() *BattleSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *BattleEventSkill) GetTargets() []uint32 {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 光环事件
type BattleEventAura struct {
	Time   uint32      `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Owner  uint32      `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Caster uint32      `protobuf:"varint,3,opt,name=caster,proto3" json:"caster,omitempty"`
	Aura   *BattleAura `protobuf:"bytes,4,opt,name=aura" json:"aura,omitempty"`
	Obtain bool        `protobuf:"varint,5,opt,name=obtain,proto3" json:"obtain,omitempty"`
}

func (m *BattleEventAura) Reset()                    { *m = BattleEventAura{} }
func (m *BattleEventAura) String() string            { return proto.CompactTextString(m) }
func (*BattleEventAura) ProtoMessage()               {}
func (*BattleEventAura) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{14} }

func (m *BattleEventAura) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventAura) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *BattleEventAura) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventAura) GetAura() *BattleAura {
	if m != nil {
		return m.Aura
	}
	return nil
}

func (m *BattleEventAura) GetObtain() bool {
	if m != nil {
		return m.Obtain
	}
	return false
}

// 伤害事件
type BattleEventHurt struct {
	Time   uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Caster uint32 `protobuf:"varint,2,opt,name=caster,proto3" json:"caster,omitempty"`
	Target uint32 `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	Hurt   uint32 `protobuf:"varint,4,opt,name=hurt,proto3" json:"hurt,omitempty"`
	Crit   uint32 `protobuf:"varint,5,opt,name=crit,proto3" json:"crit,omitempty"`
	Type   uint32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BattleEventHurt) Reset()                    { *m = BattleEventHurt{} }
func (m *BattleEventHurt) String() string            { return proto.CompactTextString(m) }
func (*BattleEventHurt) ProtoMessage()               {}
func (*BattleEventHurt) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{15} }

func (m *BattleEventHurt) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventHurt) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventHurt) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *BattleEventHurt) GetHurt() uint32 {
	if m != nil {
		return m.Hurt
	}
	return 0
}

func (m *BattleEventHurt) GetCrit() uint32 {
	if m != nil {
		return m.Crit
	}
	return 0
}

func (m *BattleEventHurt) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 光环效果事件
type BattleEventAuraEffect struct {
	Time   uint32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Owner  uint32 `protobuf:"varint,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Caster uint32 `protobuf:"varint,3,opt,name=caster,proto3" json:"caster,omitempty"`
	Type   uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Arg1   int32  `protobuf:"varint,5,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2   int32  `protobuf:"varint,6,opt,name=arg2,proto3" json:"arg2,omitempty"`
	Arg3   int32  `protobuf:"varint,7,opt,name=arg3,proto3" json:"arg3,omitempty"`
	Arg4   int32  `protobuf:"varint,8,opt,name=arg4,proto3" json:"arg4,omitempty"`
}

func (m *BattleEventAuraEffect) Reset()                    { *m = BattleEventAuraEffect{} }
func (m *BattleEventAuraEffect) String() string            { return proto.CompactTextString(m) }
func (*BattleEventAuraEffect) ProtoMessage()               {}
func (*BattleEventAuraEffect) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{16} }

func (m *BattleEventAuraEffect) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventAuraEffect) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *BattleEventAuraEffect) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventAuraEffect) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg1() int32 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg2() int32 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg3() int32 {
	if m != nil {
		return m.Arg3
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg4() int32 {
	if m != nil {
		return m.Arg4
	}
	return 0
}

type BattleResult struct {
	Win    bool                     `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	Units  []*BattleUnit            `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	Skill  []*BattleEventSkill      `protobuf:"bytes,3,rep,name=skill" json:"skill,omitempty"`
	Aura   []*BattleEventAura       `protobuf:"bytes,4,rep,name=aura" json:"aura,omitempty"`
	Hurt   []*BattleEventHurt       `protobuf:"bytes,5,rep,name=hurt" json:"hurt,omitempty"`
	Effect []*BattleEventAuraEffect `protobuf:"bytes,6,rep,name=effect" json:"effect,omitempty"`
}

func (m *BattleResult) Reset()                    { *m = BattleResult{} }
func (m *BattleResult) String() string            { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()               {}
func (*BattleResult) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{17} }

func (m *BattleResult) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *BattleResult) GetUnits() []*BattleUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *BattleResult) GetSkill() []*BattleEventSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *BattleResult) GetAura() []*BattleEventAura {
	if m != nil {
		return m.Aura
	}
	return nil
}

func (m *BattleResult) GetHurt() []*BattleEventHurt {
	if m != nil {
		return m.Hurt
	}
	return nil
}

func (m *BattleResult) GetEffect() []*BattleEventAuraEffect {
	if m != nil {
		return m.Effect
	}
	return nil
}

type MakeBattleRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MakeBattleRequest) Reset()                    { *m = MakeBattleRequest{} }
func (m *MakeBattleRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeBattleRequest) ProtoMessage()               {}
func (*MakeBattleRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{18} }

func (m *MakeBattleRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MakeBattleResponse struct {
	Result *BattleResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *MakeBattleResponse) Reset()                    { *m = MakeBattleResponse{} }
func (m *MakeBattleResponse) String() string            { return proto.CompactTextString(m) }
func (*MakeBattleResponse) ProtoMessage()               {}
func (*MakeBattleResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{19} }

func (m *MakeBattleResponse) GetResult() *BattleResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// 使用道具
type UseItemRequest struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cnt  uint32 `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Arg1 int32  `protobuf:"varint,3,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 int32  `protobuf:"varint,4,opt,name=arg2,proto3" json:"arg2,omitempty"`
}

func (m *UseItemRequest) Reset()                    { *m = UseItemRequest{} }
func (m *UseItemRequest) String() string            { return proto.CompactTextString(m) }
func (*UseItemRequest) ProtoMessage()               {}
func (*UseItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{20} }

func (m *UseItemRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UseItemRequest) GetCnt() uint32 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *UseItemRequest) GetArg1() int32 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *UseItemRequest) GetArg2() int32 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

type UseItemResponse struct {
	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *UseItemResponse) Reset()                    { *m = UseItemResponse{} }
func (m *UseItemResponse) String() string            { return proto.CompactTextString(m) }
func (*UseItemResponse) ProtoMessage()               {}
func (*UseItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{21} }

func (m *UseItemResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ItemCntInfo struct {
	Add uint32 `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id  uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cnt uint64 `protobuf:"varint,3,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (m *ItemCntInfo) Reset()                    { *m = ItemCntInfo{} }
func (m *ItemCntInfo) String() string            { return proto.CompactTextString(m) }
func (*ItemCntInfo) ProtoMessage()               {}
func (*ItemCntInfo) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{22} }

func (m *ItemCntInfo) GetAdd() uint32 {
	if m != nil {
		return m.Add
	}
	return 0
}

func (m *ItemCntInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ItemCntInfo) GetCnt() uint64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type ItemCntChangedNotice struct {
	Info []*ItemCntInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ItemCntChangedNotice) Reset()                    { *m = ItemCntChangedNotice{} }
func (m *ItemCntChangedNotice) String() string            { return proto.CompactTextString(m) }
func (*ItemCntChangedNotice) ProtoMessage()               {}
func (*ItemCntChangedNotice) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{23} }

func (m *ItemCntChangedNotice) GetInfo() []*ItemCntInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type MarketBuyRequest struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *MarketBuyRequest) Reset()                    { *m = MarketBuyRequest{} }
func (m *MarketBuyRequest) String() string            { return proto.CompactTextString(m) }
func (*MarketBuyRequest) ProtoMessage()               {}
func (*MarketBuyRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{24} }

func (m *MarketBuyRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MarketBuyRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MarketBuyResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *MarketBuyResponse) Reset()                    { *m = MarketBuyResponse{} }
func (m *MarketBuyResponse) String() string            { return proto.CompactTextString(m) }
func (*MarketBuyResponse) ProtoMessage()               {}
func (*MarketBuyResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{25} }

func (m *MarketBuyResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type HeroLevelupRequest struct {
	HeroId uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *HeroLevelupRequest) Reset()                    { *m = HeroLevelupRequest{} }
func (m *HeroLevelupRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroLevelupRequest) ProtoMessage()               {}
func (*HeroLevelupRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{26} }

func (m *HeroLevelupRequest) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type HeroLevelupResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *HeroLevelupResponse) Reset()                    { *m = HeroLevelupResponse{} }
func (m *HeroLevelupResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroLevelupResponse) ProtoMessage()               {}
func (*HeroLevelupResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{27} }

func (m *HeroLevelupResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type HeroRefineRequest struct {
	HeroId uint32 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Super  uint32 `protobuf:"varint,2,opt,name=super,proto3" json:"super,omitempty"`
}

func (m *HeroRefineRequest) Reset()                    { *m = HeroRefineRequest{} }
func (m *HeroRefineRequest) String() string            { return proto.CompactTextString(m) }
func (*HeroRefineRequest) ProtoMessage()               {}
func (*HeroRefineRequest) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{28} }

func (m *HeroRefineRequest) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *HeroRefineRequest) GetSuper() uint32 {
	if m != nil {
		return m.Super
	}
	return 0
}

type HeroRefineResponse struct {
	ErrorCode uint32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Result    uint32 `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *HeroRefineResponse) Reset()                    { *m = HeroRefineResponse{} }
func (m *HeroRefineResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroRefineResponse) ProtoMessage()               {}
func (*HeroRefineResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{29} }

func (m *HeroRefineResponse) GetErrorCode() uint32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *HeroRefineResponse) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type HeroInfoUpdateResponse struct {
	Hero *Hero `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
}

func (m *HeroInfoUpdateResponse) Reset()                    { *m = HeroInfoUpdateResponse{} }
func (m *HeroInfoUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*HeroInfoUpdateResponse) ProtoMessage()               {}
func (*HeroInfoUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorGame, []int{30} }

func (m *HeroInfoUpdateResponse) GetHero() *Hero {
	if m != nil {
		return m.Hero
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerDataRequest)(nil), "msg.PlayerDataRequest")
	proto.RegisterType((*Item)(nil), "msg.Item")
	proto.RegisterType((*Skill)(nil), "msg.Skill")
	proto.RegisterType((*Aura)(nil), "msg.Aura")
	proto.RegisterType((*Hero)(nil), "msg.Hero")
	proto.RegisterType((*PlayerDataResponse)(nil), "msg.PlayerDataResponse")
	proto.RegisterType((*GMCommandRequest)(nil), "msg.GMCommandRequest")
	proto.RegisterType((*GMCommandResponse)(nil), "msg.GMCommandResponse")
	proto.RegisterType((*NoticeRequest)(nil), "msg.NoticeRequest")
	proto.RegisterType((*NoticeResponse)(nil), "msg.NoticeResponse")
	proto.RegisterType((*BattleSkill)(nil), "msg.BattleSkill")
	proto.RegisterType((*BattleAura)(nil), "msg.BattleAura")
	proto.RegisterType((*BattleUnit)(nil), "msg.BattleUnit")
	proto.RegisterType((*BattleEventSkill)(nil), "msg.BattleEventSkill")
	proto.RegisterType((*BattleEventAura)(nil), "msg.BattleEventAura")
	proto.RegisterType((*BattleEventHurt)(nil), "msg.BattleEventHurt")
	proto.RegisterType((*BattleEventAuraEffect)(nil), "msg.BattleEventAuraEffect")
	proto.RegisterType((*BattleResult)(nil), "msg.BattleResult")
	proto.RegisterType((*MakeBattleRequest)(nil), "msg.MakeBattleRequest")
	proto.RegisterType((*MakeBattleResponse)(nil), "msg.MakeBattleResponse")
	proto.RegisterType((*UseItemRequest)(nil), "msg.UseItemRequest")
	proto.RegisterType((*UseItemResponse)(nil), "msg.UseItemResponse")
	proto.RegisterType((*ItemCntInfo)(nil), "msg.ItemCntInfo")
	proto.RegisterType((*ItemCntChangedNotice)(nil), "msg.ItemCntChangedNotice")
	proto.RegisterType((*MarketBuyRequest)(nil), "msg.MarketBuyRequest")
	proto.RegisterType((*MarketBuyResponse)(nil), "msg.MarketBuyResponse")
	proto.RegisterType((*HeroLevelupRequest)(nil), "msg.HeroLevelupRequest")
	proto.RegisterType((*HeroLevelupResponse)(nil), "msg.HeroLevelupResponse")
	proto.RegisterType((*HeroRefineRequest)(nil), "msg.HeroRefineRequest")
	proto.RegisterType((*HeroRefineResponse)(nil), "msg.HeroRefineResponse")
	proto.RegisterType((*HeroInfoUpdateResponse)(nil), "msg.HeroInfoUpdateResponse")
}
func (m *PlayerDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *Skill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Skill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Aura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Hero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hero) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.RefineLv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.RefineLv))
	}
	if m.RefineTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.RefineTimes))
	}
	if m.RefineSuper {
		dAtA[i] = 0x28
		i++
		if m.RefineSuper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Active) > 0 {
		for _, msg := range m.Active {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Passive) > 0 {
		for _, msg := range m.Passive {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Power != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Power))
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Status))
	}
	if m.LifePoint != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.LifePoint))
	}
	if m.LifePointMax != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.LifePointMax))
	}
	return i, nil
}

func (m *PlayerDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Acct) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Acct)))
		i += copy(dAtA[i:], m.Acct)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Pid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Pid)))
		i += copy(dAtA[i:], m.Pid)
	}
	if m.Sid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Sid))
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.VipLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.VipLevel))
	}
	if m.Male {
		dAtA[i] = 0x40
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0x52
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Auras) > 0 {
		for _, msg := range m.Auras {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GMCommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMCommandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	return i, nil
}

func (m *GMCommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GMCommandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *NoticeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *NoticeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoticeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Flag))
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *BattleSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleAura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleAura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Lv))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Pos))
	}
	if m.Attacker != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Attacker))
	}
	if m.Apm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Apm))
	}
	if m.Atk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Atk))
	}
	if m.Def != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Def))
	}
	if m.Hp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Hp))
	}
	if m.Crit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Crit))
	}
	if m.Hurt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Hurt))
	}
	if m.Comm != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Comm.Size()))
		n1, err := m.Comm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Skill) > 0 {
		for _, msg := range m.Skill {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BattleEventSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Time))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Caster))
	}
	if m.Skill != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Skill.Size()))
		n2, err := m.Skill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Targets) > 0 {
		dAtA4 := make([]byte, len(m.Targets)*10)
		var j3 int
		for _, num := range m.Targets {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *BattleEventAura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventAura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Time))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Owner))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Caster))
	}
	if m.Aura != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Aura.Size()))
		n5, err := m.Aura.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Obtain {
		dAtA[i] = 0x28
		i++
		if m.Obtain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BattleEventHurt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventHurt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Time))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Caster))
	}
	if m.Target != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Target))
	}
	if m.Hurt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Hurt))
	}
	if m.Crit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Crit))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *BattleEventAuraEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventAuraEffect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Time))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Owner))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Caster))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Type))
	}
	if m.Arg1 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg4))
	}
	return i, nil
}

func (m *BattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Win {
		dAtA[i] = 0x8
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Skill) > 0 {
		for _, msg := range m.Skill {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Aura) > 0 {
		for _, msg := range m.Aura {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hurt) > 0 {
		for _, msg := range m.Hurt {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Effect) > 0 {
		for _, msg := range m.Effect {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MakeBattleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeBattleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MakeBattleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakeBattleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result.Size()))
		n6, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *UseItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	if m.Arg1 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Arg2))
	}
	return i, nil
}

func (m *UseItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ItemCntInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemCntInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Add != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Add))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *ItemCntChangedNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemCntChangedNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MarketBuyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketBuyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Index))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *MarketBuyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketBuyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *HeroLevelupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroLevelupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.HeroId))
	}
	return i, nil
}

func (m *HeroLevelupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroLevelupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *HeroRefineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRefineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.HeroId))
	}
	if m.Super != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Super))
	}
	return i, nil
}

func (m *HeroRefineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRefineResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *HeroInfoUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroInfoUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Hero.Size()))
		n7, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerDataRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	return n
}

func (m *Item) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	return n
}

func (m *Skill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	return n
}

func (m *Aura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	return n
}

func (m *Hero) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.RefineLv != 0 {
		n += 1 + sovGame(uint64(m.RefineLv))
	}
	if m.RefineTimes != 0 {
		n += 1 + sovGame(uint64(m.RefineTimes))
	}
	if m.RefineSuper {
		n += 2
	}
	if len(m.Active) > 0 {
		for _, e := range m.Active {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Passive) > 0 {
		for _, e := range m.Passive {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Power != 0 {
		n += 1 + sovGame(uint64(m.Power))
	}
	if m.Status != 0 {
		n += 1 + sovGame(uint64(m.Status))
	}
	if m.LifePoint != 0 {
		n += 1 + sovGame(uint64(m.LifePoint))
	}
	if m.LifePointMax != 0 {
		n += 1 + sovGame(uint64(m.LifePointMax))
	}
	return n
}

func (m *PlayerDataResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Acct)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Sid != 0 {
		n += 1 + sovGame(uint64(m.Sid))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.VipLevel != 0 {
		n += 1 + sovGame(uint64(m.VipLevel))
	}
	if m.Male {
		n += 2
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Auras) > 0 {
		for _, e := range m.Auras {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *GMCommandRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *GMCommandResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	return n
}

func (m *NoticeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *NoticeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovGame(uint64(m.Flag))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *BattleSkill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	return n
}

func (m *BattleAura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	return n
}

func (m *BattleUnit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGame(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovGame(uint64(m.Lv))
	}
	if m.Pos != 0 {
		n += 1 + sovGame(uint64(m.Pos))
	}
	if m.Attacker != 0 {
		n += 1 + sovGame(uint64(m.Attacker))
	}
	if m.Apm != 0 {
		n += 1 + sovGame(uint64(m.Apm))
	}
	if m.Atk != 0 {
		n += 1 + sovGame(uint64(m.Atk))
	}
	if m.Def != 0 {
		n += 1 + sovGame(uint64(m.Def))
	}
	if m.Hp != 0 {
		n += 1 + sovGame(uint64(m.Hp))
	}
	if m.Crit != 0 {
		n += 1 + sovGame(uint64(m.Crit))
	}
	if m.Hurt != 0 {
		n += 1 + sovGame(uint64(m.Hurt))
	}
	if m.Comm != nil {
		l = m.Comm.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *BattleEventSkill) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGame(uint64(m.Time))
	}
	if m.Caster != 0 {
		n += 1 + sovGame(uint64(m.Caster))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Targets) > 0 {
		l = 0
		for _, e := range m.Targets {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	return n
}

func (m *BattleEventAura) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGame(uint64(m.Time))
	}
	if m.Owner != 0 {
		n += 1 + sovGame(uint64(m.Owner))
	}
	if m.Caster != 0 {
		n += 1 + sovGame(uint64(m.Caster))
	}
	if m.Aura != nil {
		l = m.Aura.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Obtain {
		n += 2
	}
	return n
}

func (m *BattleEventHurt) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGame(uint64(m.Time))
	}
	if m.Caster != 0 {
		n += 1 + sovGame(uint64(m.Caster))
	}
	if m.Target != 0 {
		n += 1 + sovGame(uint64(m.Target))
	}
	if m.Hurt != 0 {
		n += 1 + sovGame(uint64(m.Hurt))
	}
	if m.Crit != 0 {
		n += 1 + sovGame(uint64(m.Crit))
	}
	if m.Type != 0 {
		n += 1 + sovGame(uint64(m.Type))
	}
	return n
}

func (m *BattleEventAuraEffect) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGame(uint64(m.Time))
	}
	if m.Owner != 0 {
		n += 1 + sovGame(uint64(m.Owner))
	}
	if m.Caster != 0 {
		n += 1 + sovGame(uint64(m.Caster))
	}
	if m.Type != 0 {
		n += 1 + sovGame(uint64(m.Type))
	}
	if m.Arg1 != 0 {
		n += 1 + sovGame(uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		n += 1 + sovGame(uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		n += 1 + sovGame(uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		n += 1 + sovGame(uint64(m.Arg4))
	}
	return n
}

func (m *BattleResult) Size() (n int) {
	var l int
	_ = l
	if m.Win {
		n += 2
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Aura) > 0 {
		for _, e := range m.Aura {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Hurt) > 0 {
		for _, e := range m.Hurt {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Effect) > 0 {
		for _, e := range m.Effect {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *MakeBattleRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	return n
}

func (m *MakeBattleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *UseItemRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	if m.Arg1 != 0 {
		n += 1 + sovGame(uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		n += 1 + sovGame(uint64(m.Arg2))
	}
	return n
}

func (m *UseItemResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	return n
}

func (m *ItemCntInfo) Size() (n int) {
	var l int
	_ = l
	if m.Add != 0 {
		n += 1 + sovGame(uint64(m.Add))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sovGame(uint64(m.Cnt))
	}
	return n
}

func (m *ItemCntChangedNotice) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *MarketBuyRequest) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGame(uint64(m.Index))
	}
	if m.Count != 0 {
		n += 1 + sovGame(uint64(m.Count))
	}
	return n
}

func (m *MarketBuyResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovGame(uint64(m.ErrorCode))
	}
	return n
}

func (m *HeroLevelupRequest) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovGame(uint64(m.HeroId))
	}
	return n
}

func (m *HeroLevelupResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovGame(uint64(m.ErrorCode))
	}
	return n
}

func (m *HeroRefineRequest) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovGame(uint64(m.HeroId))
	}
	if m.Super != 0 {
		n += 1 + sovGame(uint64(m.Super))
	}
	return n
}

func (m *HeroRefineResponse) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovGame(uint64(m.ErrorCode))
	}
	if m.Result != 0 {
		n += 1 + sovGame(uint64(m.Result))
	}
	return n
}

func (m *HeroInfoUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Skill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Skill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Skill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineLv", wireType)
			}
			m.RefineLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefineLv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineTimes", wireType)
			}
			m.RefineTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefineTimes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineSuper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefineSuper = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = append(m.Active, &Skill{})
			if err := m.Active[len(m.Active)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passive = append(m.Passive, &Skill{})
			if err := m.Passive[len(m.Passive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePoint", wireType)
			}
			m.LifePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePoint |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePointMax", wireType)
			}
			m.LifePointMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePointMax |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &Hero{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auras", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auras = append(m.Auras, &Aura{})
			if err := m.Auras[len(m.Auras)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMCommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMCommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMCommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GMCommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GMCommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GMCommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoticeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoticeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoticeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleAura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleAura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleAura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			m.Attacker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attacker |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apm", wireType)
			}
			m.Apm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Apm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			m.Atk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Def", wireType)
			}
			m.Def = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Def |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crit", wireType)
			}
			m.Crit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			m.Hurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comm == nil {
				m.Comm = &BattleSkill{}
			}
			if err := m.Comm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &BattleSkill{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &BattleSkill{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Targets = append(m.Targets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Targets = append(m.Targets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventAura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventAura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventAura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aura == nil {
				m.Aura = &BattleAura{}
			}
			if err := m.Aura.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obtain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Obtain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventHurt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventHurt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventHurt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			m.Hurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crit", wireType)
			}
			m.Crit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventAuraEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventAuraEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventAuraEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			m.Arg2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg3", wireType)
			}
			m.Arg3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg4", wireType)
			}
			m.Arg4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg4 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &BattleUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &BattleEventSkill{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aura = append(m.Aura, &BattleEventAura{})
			if err := m.Aura[len(m.Aura)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hurt = append(m.Hurt, &BattleEventHurt{})
			if err := m.Hurt[len(m.Hurt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effect = append(m.Effect, &BattleEventAuraEffect{})
			if err := m.Effect[len(m.Effect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeBattleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeBattleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeBattleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakeBattleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakeBattleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakeBattleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BattleResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			m.Arg2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UseItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemCntInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemCntInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemCntInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			m.Add = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Add |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemCntChangedNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemCntChangedNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemCntChangedNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ItemCntInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketBuyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketBuyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketBuyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketBuyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketBuyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketBuyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroLevelupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroLevelupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroLevelupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroLevelupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroLevelupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroLevelupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroRefineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRefineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRefineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Super", wireType)
			}
			m.Super = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Super |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroRefineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRefineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRefineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroInfoUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroInfoUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroInfoUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &Hero{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game.proto", fileDescriptorGame) }

var fileDescriptorGame = []byte{
	// 1214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xfe, 0xad, 0xbd, 0xeb, 0xc4, 0xc7, 0x75, 0xea, 0xec, 0x2f, 0x0d, 0xab, 0x0a, 0x82, 0xb5,
	0x2d, 0xc8, 0x55, 0xff, 0x48, 0xb8, 0x91, 0xb8, 0x20, 0x02, 0x35, 0xa1, 0xa2, 0x11, 0x0d, 0xaa,
	0xa6, 0xe4, 0x86, 0x9b, 0x6a, 0xba, 0x3b, 0x76, 0x56, 0xd9, 0x7f, 0xec, 0x8e, 0x9d, 0xe6, 0x8e,
	0x47, 0x28, 0x97, 0xbc, 0x02, 0xef, 0xc0, 0x2d, 0xe2, 0x92, 0x47, 0x40, 0xe1, 0x35, 0xb8, 0x40,
	0xe7, 0xcc, 0xcc, 0x7a, 0x9c, 0x18, 0x08, 0x12, 0x77, 0xe7, 0x9c, 0xf9, 0x3c, 0x73, 0xf6, 0x3b,
	0xdf, 0x39, 0x33, 0x06, 0x98, 0xf2, 0x4c, 0x3c, 0x2a, 0xab, 0x42, 0x16, 0x7e, 0x3b, 0xab, 0xa7,
	0xe1, 0x1d, 0xd8, 0x7c, 0x91, 0xf2, 0x73, 0x51, 0x7d, 0xce, 0x25, 0x67, 0xe2, 0xdb, 0x99, 0xa8,
	0xa5, 0xbf, 0x01, 0xad, 0x24, 0x0e, 0x9c, 0xa1, 0x33, 0x72, 0x59, 0x2b, 0x89, 0xc3, 0x3d, 0x70,
	0x0f, 0xa5, 0xc8, 0x7c, 0x1f, 0xdc, 0x49, 0xca, 0xa7, 0xb4, 0xd2, 0x67, 0x64, 0x6b, 0x6c, 0x8b,
	0x22, 0xad, 0x24, 0xf6, 0x07, 0xd0, 0x8e, 0x72, 0x19, 0xb4, 0x87, 0xce, 0xa8, 0xcd, 0xd0, 0x0c,
	0x1f, 0x82, 0xf7, 0xf2, 0x34, 0x49, 0x53, 0x6b, 0x5b, 0x05, 0xdd, 0x02, 0x2f, 0x15, 0x73, 0x91,
	0xea, 0x5f, 0x2b, 0x27, 0x7c, 0x00, 0xee, 0x93, 0x59, 0xc5, 0xaf, 0x89, 0xfe, 0xb9, 0x05, 0xee,
	0x33, 0x51, 0x15, 0xd7, 0x83, 0xfb, 0xb7, 0x61, 0xbd, 0x12, 0x93, 0x24, 0x17, 0xcf, 0xe7, 0x94,
	0x62, 0x9f, 0x35, 0xbe, 0x3f, 0x84, 0x9e, 0xb2, 0xbf, 0x4e, 0x32, 0x51, 0x07, 0x2e, 0x2d, 0xdb,
	0xa1, 0x05, 0xe2, 0xe5, 0xac, 0x14, 0x55, 0xe0, 0x0d, 0x9d, 0xd1, 0x3a, 0xb3, 0x43, 0x7e, 0x08,
	0x1d, 0x1e, 0xc9, 0x64, 0x2e, 0x82, 0xce, 0xb0, 0x3d, 0xea, 0x8d, 0xe1, 0x51, 0x56, 0x4f, 0x1f,
	0xd1, 0xe7, 0x33, 0xbd, 0xe2, 0xdf, 0x85, 0xb5, 0x92, 0xd7, 0x35, 0x82, 0xd6, 0xae, 0x80, 0xcc,
	0x12, 0xe6, 0x5f, 0x16, 0x67, 0xa2, 0x0a, 0xd6, 0x55, 0xfe, 0xe4, 0xf8, 0xdb, 0xd0, 0xa9, 0x25,
	0x97, 0xb3, 0x3a, 0xe8, 0x52, 0x58, 0x7b, 0xfe, 0xbb, 0xd0, 0x4d, 0x93, 0x89, 0x78, 0x51, 0x24,
	0xb9, 0x0c, 0x80, 0x96, 0x16, 0x01, 0x3f, 0x84, 0x1b, 0x8d, 0x73, 0xc4, 0xdf, 0x04, 0x3d, 0x02,
	0x2c, 0xc5, 0xc2, 0x1f, 0x5a, 0xe0, 0xdb, 0x4a, 0xa8, 0xcb, 0x22, 0xaf, 0x05, 0x96, 0x9c, 0x47,
	0x91, 0x24, 0x62, 0xbb, 0x8c, 0x6c, 0x8c, 0xe5, 0x3c, 0x13, 0xc4, 0x6c, 0x97, 0x91, 0x8d, 0x65,
	0x2f, 0x93, 0x98, 0x38, 0xed, 0x32, 0x34, 0x31, 0x52, 0x27, 0xb1, 0xa6, 0x11, 0x4d, 0x5d, 0x22,
	0xcf, 0xc8, 0x6a, 0x51, 0xa2, 0xce, 0xa5, 0x12, 0xcd, 0x93, 0xf2, 0x39, 0x2d, 0xac, 0xa9, 0x12,
	0x19, 0x1f, 0x4f, 0xce, 0x78, 0x2a, 0x88, 0x93, 0x75, 0x46, 0xb6, 0xff, 0x3e, 0x78, 0x89, 0x14,
	0x19, 0x32, 0x82, 0x64, 0x76, 0x89, 0x4c, 0x94, 0x2b, 0x53, 0x71, 0x04, 0x9c, 0x88, 0xaa, 0xa8,
	0x03, 0xb0, 0x00, 0xa8, 0x19, 0xa6, 0xe2, 0x08, 0xe0, 0xb3, 0x8a, 0xd7, 0x41, 0xcf, 0x02, 0xa0,
	0x06, 0x99, 0x8a, 0x87, 0x0f, 0x60, 0xf0, 0xc5, 0xd1, 0x41, 0x91, 0x65, 0x3c, 0x8f, 0x4d, 0x8f,
	0x04, 0xb0, 0x16, 0xa9, 0x88, 0xe6, 0xc6, 0xb8, 0xe1, 0x7d, 0xd8, 0xb4, 0xd0, 0x9a, 0xc7, 0x6d,
	0xe8, 0x54, 0xa2, 0x9e, 0xa5, 0x8a, 0x49, 0x8f, 0x69, 0x2f, 0xfc, 0x04, 0xfa, 0x5f, 0x15, 0x32,
	0x89, 0x84, 0xd9, 0xd7, 0xee, 0x31, 0x4f, 0xf7, 0xd8, 0x36, 0x74, 0x72, 0x02, 0x69, 0xca, 0xb5,
	0x17, 0xee, 0xc1, 0x86, 0xf9, 0xf1, 0xa2, 0x5c, 0xd7, 0xfe, 0xf5, 0x43, 0xe8, 0xed, 0x73, 0x29,
	0x53, 0xb1, 0xba, 0x3b, 0x37, 0xa0, 0x95, 0xce, 0x4d, 0x63, 0xa7, 0xf3, 0xf0, 0x01, 0x80, 0x82,
	0xaf, 0xec, 0xce, 0xcb, 0xe8, 0x1f, 0x5b, 0x06, 0x7e, 0x9c, 0x27, 0xf4, 0x55, 0xf2, 0xbc, 0x14,
	0x66, 0x72, 0xa0, 0x7d, 0x65, 0x72, 0xa8, 0x2d, 0xda, 0x66, 0x0b, 0x92, 0x54, 0x61, 0xfa, 0x10,
	0x4d, 0x94, 0x06, 0x97, 0x92, 0x47, 0xa7, 0xba, 0xf9, 0xfa, 0xac, 0xf1, 0x11, 0xcd, 0xcb, 0x4c,
	0x4b, 0x09, 0x4d, 0x8a, 0xc8, 0x53, 0xad, 0x21, 0x34, 0x31, 0x12, 0x8b, 0x89, 0xee, 0x28, 0x34,
	0xf1, 0xcc, 0x93, 0x52, 0xf7, 0x52, 0xeb, 0xa4, 0xc4, 0x3c, 0xa3, 0x2a, 0x31, 0x2d, 0x44, 0x36,
	0xc6, 0x4e, 0x66, 0x95, 0xd4, 0x5d, 0x43, 0xb6, 0x7f, 0x17, 0x5c, 0x2c, 0x77, 0x70, 0x63, 0xe8,
	0x8c, 0x7a, 0xe3, 0x01, 0x29, 0xc6, 0x22, 0x93, 0xd1, 0xaa, 0xff, 0x21, 0x78, 0x35, 0xba, 0x41,
	0x9f, 0x84, 0x75, 0x15, 0xa6, 0x96, 0xc3, 0xef, 0x1c, 0x18, 0xa8, 0xf0, 0xd3, 0xb9, 0xc8, 0xa5,
	0xaa, 0x07, 0x52, 0x96, 0x64, 0x0b, 0xca, 0x92, 0x8c, 0x54, 0x14, 0xf1, 0x5a, 0x8a, 0x4a, 0xd3,
	0xa6, 0xbd, 0xc5, 0x41, 0xed, 0xbf, 0xc8, 0x47, 0x2d, 0xa3, 0x68, 0x25, 0xaf, 0xa6, 0x42, 0x22,
	0xad, 0xed, 0x51, 0x9f, 0x19, 0x37, 0x7c, 0xeb, 0xc0, 0x4d, 0x2b, 0x05, 0xaa, 0xf1, 0xaa, 0x0c,
	0xb6, 0xc0, 0x2b, 0xce, 0xf2, 0x26, 0x01, 0xe5, 0x58, 0x79, 0xb5, 0x97, 0xf2, 0xba, 0x03, 0x2e,
	0x76, 0x10, 0xd5, 0xb0, 0x37, 0xbe, 0x69, 0xa5, 0x45, 0xed, 0x45, 0x8b, 0xf8, 0xe3, 0xe2, 0xb5,
	0xe4, 0x49, 0xae, 0x07, 0xaa, 0xf6, 0xc2, 0xef, 0x97, 0x53, 0x7a, 0x86, 0xbc, 0xff, 0x1b, 0x52,
	0xb6, 0xa1, 0xa3, 0xbe, 0xce, 0x24, 0xa5, 0xbc, 0xa6, 0x9e, 0xae, 0x55, 0x4f, 0x53, 0x77, 0x6f,
	0xb9, 0xee, 0xa4, 0xd9, 0xce, 0x42, 0xb3, 0xe1, 0x4f, 0x0e, 0xdc, 0xba, 0x44, 0xd3, 0xd3, 0xc9,
	0x44, 0x44, 0xf2, 0x3f, 0x20, 0xcb, 0x9c, 0xe7, 0x5a, 0x3d, 0x82, 0xe3, 0xb7, 0x9a, 0x7e, 0x44,
	0x79, 0x79, 0x8c, 0x6c, 0x1d, 0x1b, 0x53, 0x5e, 0x2a, 0x36, 0xd6, 0xb1, 0xc7, 0x24, 0x76, 0x15,
	0x7b, 0xac, 0x63, 0xbb, 0x24, 0x77, 0x15, 0xdb, 0x0d, 0xff, 0x70, 0xe0, 0x86, 0xca, 0x9f, 0xd1,
	0xfc, 0xc1, 0x96, 0x38, 0x4b, 0x72, 0xca, 0x7a, 0x9d, 0xa1, 0xe9, 0x7f, 0x00, 0xde, 0x2c, 0x4f,
	0x64, 0x1d, 0xb4, 0x48, 0xb4, 0x76, 0xd1, 0xb0, 0x95, 0x99, 0x5a, 0xf5, 0xef, 0x2f, 0x24, 0x87,
	0xb0, 0x5b, 0x16, 0x6c, 0x21, 0x62, 0xa3, 0xbb, 0x51, 0xa3, 0x03, 0xc4, 0x6e, 0x5d, 0xc6, 0x5a,
	0x62, 0x18, 0xe9, 0xe2, 0x78, 0xab, 0x91, 0x28, 0x02, 0x5d, 0xb2, 0x31, 0x74, 0x04, 0x51, 0xaf,
	0xaf, 0xda, 0xdb, 0xab, 0x76, 0x55, 0xc5, 0x61, 0x1a, 0x89, 0xaf, 0x9d, 0x23, 0x7e, 0x2a, 0x0c,
	0x03, 0x97, 0x5f, 0x3b, 0x34, 0x87, 0xc2, 0xcf, 0xc0, 0xb7, 0x41, 0x7a, 0xb2, 0xde, 0x5b, 0x1a,
	0xe0, 0xbd, 0xf1, 0xa6, 0x75, 0x9c, 0xe2, 0xb2, 0x99, 0xe9, 0xdf, 0xc0, 0xc6, 0x71, 0x2d, 0xe8,
	0x0a, 0x5a, 0x7d, 0x84, 0x79, 0x24, 0x29, 0x59, 0xa0, 0xd9, 0x14, 0xba, 0xbd, 0xa2, 0xd0, 0xee,
	0xa2, 0xd0, 0xe1, 0x3d, 0xb8, 0xd9, 0xec, 0xbd, 0xf2, 0x6a, 0xe9, 0x37, 0x69, 0x3c, 0x81, 0x1e,
	0xe2, 0x0e, 0x72, 0x79, 0x98, 0x4f, 0x0a, 0x1a, 0x87, 0xb1, 0x49, 0x02, 0xcd, 0xbf, 0x7b, 0xba,
	0xb9, 0xea, 0xe9, 0xb6, 0x07, 0x5b, 0x7a, 0x8b, 0x83, 0x13, 0x9e, 0x4f, 0x45, 0xac, 0xae, 0x1b,
	0x1c, 0x7f, 0x49, 0x3e, 0x29, 0x02, 0xc7, 0x9a, 0x6b, 0xd6, 0x59, 0x8c, 0x56, 0xc3, 0x4f, 0x61,
	0x70, 0xc4, 0xab, 0x53, 0x21, 0xf7, 0x67, 0xe7, 0x86, 0x89, 0x2d, 0xf0, 0x92, 0x3c, 0x16, 0x6f,
	0x74, 0x1e, 0xca, 0xc1, 0x68, 0x54, 0xcc, 0x34, 0x23, 0x2e, 0x53, 0x4e, 0x38, 0xc6, 0x6a, 0x35,
	0xbf, 0xd7, 0x5f, 0xfb, 0x1e, 0x80, 0xa8, 0xaa, 0xa2, 0x7a, 0x15, 0x15, 0xb1, 0xe9, 0xb6, 0x2e,
	0x45, 0x0e, 0x8a, 0x18, 0x2f, 0x35, 0x1f, 0xaf, 0x76, 0x7a, 0x2e, 0xcc, 0x4a, 0x73, 0xea, 0x3b,
	0xb0, 0x86, 0x57, 0xfd, 0xab, 0xa6, 0x08, 0x1d, 0x74, 0x0f, 0xe3, 0x70, 0x17, 0xfe, 0xbf, 0x04,
	0xbf, 0xde, 0x21, 0xfb, 0xb0, 0x49, 0xef, 0x07, 0x7a, 0xf8, 0xfd, 0xd3, 0x19, 0xf8, 0x71, 0x35,
	0xbd, 0x17, 0xf5, 0x14, 0x20, 0x27, 0xfc, 0x52, 0x25, 0x6a, 0xf6, 0xb8, 0xd6, 0xc1, 0x56, 0xa9,
	0x5b, 0x4b, 0xa5, 0xfe, 0x18, 0xb6, 0x71, 0x33, 0xe4, 0xfe, 0xb8, 0x8c, 0xb9, 0xb4, 0x37, 0x74,
	0x31, 0x0d, 0x2d, 0x5a, 0xeb, 0xed, 0x43, 0xe1, 0xfd, 0xc1, 0x2f, 0x17, 0x3b, 0xce, 0xaf, 0x17,
	0x3b, 0xce, 0x6f, 0x17, 0x3b, 0xce, 0xdb, 0xdf, 0x77, 0xfe, 0xf7, 0xba, 0x43, 0x7f, 0x0e, 0x1e,
	0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0x99, 0x44, 0xd7, 0x2f, 0x2a, 0x0c, 0x00, 0x00,
}
