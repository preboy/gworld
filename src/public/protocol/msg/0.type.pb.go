// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: 0.type.proto

/*
	Package msg is a generated protocol buffer package.

	It is generated from these files:
		0.type.proto
		1_session.proto
		2_player.proto
		3_hero.proto
		4_quest.proto
		5_chapter.proto

	It has these top-level messages:
		Item
		Skill
		Aura
		Hero
		BattleSkill
		BattleAura
		BattleUnit
		BattleEventSkill
		BattleEventAura
		BattleEventHurt
		BattleEventAuraEffect
		BattleResult
		PingRequest
		PingResponse
		LoginRequest
		LoginResponse
		EnterGameRequest
		EnterGameResponse
		PlayerDataRequest
		PlayerDataResponse
		GMCommandRequest
		GMCommandResponse
		UseItemRequest
		UseItemResponse
		MarketBuyRequest
		MarketBuyResponse
		ItemUpdate
		PlayerExpUpdate
		NoticeUpdate
		HeroLevelupRequest
		HeroLevelupResponse
		HeroRefineRequest
		HeroRefineResponse
		HeroInfoUpdateResponse
		QuestData
		QuestInfo
		QuestListRequest
		QuestListResponse
		QuestOpRequest
		QuestOpResponse
		QuestUpdate
		ChapterInfo
		ChapterInfoRequest
		ChapterInfoResponse
		ChapterFightingRequest
		ChapterFightingResponse
		ChapterRewardsRequest
		ChapterRewardsResponse
		ChapterLootRequest
		ChapterLootResponse
*/
package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Flag uint32 `protobuf:"varint,1,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Cnt  int64  `protobuf:"varint,3,opt,name=Cnt,proto3" json:"Cnt,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{0} }

func (m *Item) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *Item) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

type Skill struct {
	Id    uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{1} }

func (m *Skill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Skill) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Aura struct {
	Id    uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Level uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *Aura) Reset()                    { *m = Aura{} }
func (m *Aura) String() string            { return proto.CompactTextString(m) }
func (*Aura) ProtoMessage()               {}
func (*Aura) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{2} }

func (m *Aura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Aura) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type Hero struct {
	Id           uint32   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Level        uint32   `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	RefineLv     uint32   `protobuf:"varint,3,opt,name=RefineLv,proto3" json:"RefineLv,omitempty"`
	RefineTimes  uint32   `protobuf:"varint,4,opt,name=RefineTimes,proto3" json:"RefineTimes,omitempty"`
	RefineSuper  bool     `protobuf:"varint,5,opt,name=RefineSuper,proto3" json:"RefineSuper,omitempty"`
	Active       []*Skill `protobuf:"bytes,6,rep,name=Active" json:"Active,omitempty"`
	Passive      []*Skill `protobuf:"bytes,7,rep,name=Passive" json:"Passive,omitempty"`
	Power        uint32   `protobuf:"varint,8,opt,name=Power,proto3" json:"Power,omitempty"`
	Status       uint32   `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	LifePoint    uint32   `protobuf:"varint,10,opt,name=LifePoint,proto3" json:"LifePoint,omitempty"`
	LifePointMax uint32   `protobuf:"varint,11,opt,name=LifePointMax,proto3" json:"LifePointMax,omitempty"`
}

func (m *Hero) Reset()                    { *m = Hero{} }
func (m *Hero) String() string            { return proto.CompactTextString(m) }
func (*Hero) ProtoMessage()               {}
func (*Hero) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{3} }

func (m *Hero) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hero) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Hero) GetRefineLv() uint32 {
	if m != nil {
		return m.RefineLv
	}
	return 0
}

func (m *Hero) GetRefineTimes() uint32 {
	if m != nil {
		return m.RefineTimes
	}
	return 0
}

func (m *Hero) GetRefineSuper() bool {
	if m != nil {
		return m.RefineSuper
	}
	return false
}

func (m *Hero) GetActive() []*Skill {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Hero) GetPassive() []*Skill {
	if m != nil {
		return m.Passive
	}
	return nil
}

func (m *Hero) GetPower() uint32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Hero) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hero) GetLifePoint() uint32 {
	if m != nil {
		return m.LifePoint
	}
	return 0
}

func (m *Hero) GetLifePointMax() uint32 {
	if m != nil {
		return m.LifePointMax
	}
	return 0
}

type BattleSkill struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=Lv,proto3" json:"Lv,omitempty"`
}

func (m *BattleSkill) Reset()                    { *m = BattleSkill{} }
func (m *BattleSkill) String() string            { return proto.CompactTextString(m) }
func (*BattleSkill) ProtoMessage()               {}
func (*BattleSkill) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{4} }

func (m *BattleSkill) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleSkill) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleAura struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv uint32 `protobuf:"varint,2,opt,name=Lv,proto3" json:"Lv,omitempty"`
}

func (m *BattleAura) Reset()                    { *m = BattleAura{} }
func (m *BattleAura) String() string            { return proto.CompactTextString(m) }
func (*BattleAura) ProtoMessage()               {}
func (*BattleAura) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{5} }

func (m *BattleAura) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleAura) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

type BattleUnit struct {
	Type     uint32         `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Id       uint32         `protobuf:"varint,2,opt,name=Id,proto3" json:"Id,omitempty"`
	Lv       uint32         `protobuf:"varint,3,opt,name=Lv,proto3" json:"Lv,omitempty"`
	Pos      uint32         `protobuf:"varint,4,opt,name=Pos,proto3" json:"Pos,omitempty"`
	Attacker uint32         `protobuf:"varint,5,opt,name=Attacker,proto3" json:"Attacker,omitempty"`
	Apm      uint32         `protobuf:"varint,6,opt,name=Apm,proto3" json:"Apm,omitempty"`
	Atk      uint32         `protobuf:"varint,7,opt,name=Atk,proto3" json:"Atk,omitempty"`
	Def      uint32         `protobuf:"varint,8,opt,name=Def,proto3" json:"Def,omitempty"`
	Hp       uint32         `protobuf:"varint,9,opt,name=Hp,proto3" json:"Hp,omitempty"`
	Crit     uint32         `protobuf:"varint,10,opt,name=Crit,proto3" json:"Crit,omitempty"`
	Hurt     uint32         `protobuf:"varint,11,opt,name=Hurt,proto3" json:"Hurt,omitempty"`
	Comm     *BattleSkill   `protobuf:"bytes,12,opt,name=Comm" json:"Comm,omitempty"`
	Skill    []*BattleSkill `protobuf:"bytes,13,rep,name=Skill" json:"Skill,omitempty"`
}

func (m *BattleUnit) Reset()                    { *m = BattleUnit{} }
func (m *BattleUnit) String() string            { return proto.CompactTextString(m) }
func (*BattleUnit) ProtoMessage()               {}
func (*BattleUnit) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{6} }

func (m *BattleUnit) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleUnit) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BattleUnit) GetLv() uint32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *BattleUnit) GetPos() uint32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *BattleUnit) GetAttacker() uint32 {
	if m != nil {
		return m.Attacker
	}
	return 0
}

func (m *BattleUnit) GetApm() uint32 {
	if m != nil {
		return m.Apm
	}
	return 0
}

func (m *BattleUnit) GetAtk() uint32 {
	if m != nil {
		return m.Atk
	}
	return 0
}

func (m *BattleUnit) GetDef() uint32 {
	if m != nil {
		return m.Def
	}
	return 0
}

func (m *BattleUnit) GetHp() uint32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *BattleUnit) GetCrit() uint32 {
	if m != nil {
		return m.Crit
	}
	return 0
}

func (m *BattleUnit) GetHurt() uint32 {
	if m != nil {
		return m.Hurt
	}
	return 0
}

func (m *BattleUnit) GetComm() *BattleSkill {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *BattleUnit) GetSkill() []*BattleSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

// 技能释放事件
type BattleEventSkill struct {
	Time    uint32       `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Caster  uint32       `protobuf:"varint,2,opt,name=Caster,proto3" json:"Caster,omitempty"`
	Skill   *BattleSkill `protobuf:"bytes,3,opt,name=Skill" json:"Skill,omitempty"`
	Targets []uint32     `protobuf:"varint,4,rep,packed,name=Targets" json:"Targets,omitempty"`
}

func (m *BattleEventSkill) Reset()                    { *m = BattleEventSkill{} }
func (m *BattleEventSkill) String() string            { return proto.CompactTextString(m) }
func (*BattleEventSkill) ProtoMessage()               {}
func (*BattleEventSkill) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{7} }

func (m *BattleEventSkill) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventSkill) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventSkill) GetSkill() *BattleSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *BattleEventSkill) GetTargets() []uint32 {
	if m != nil {
		return m.Targets
	}
	return nil
}

// 光环事件
type BattleEventAura struct {
	Time   uint32      `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Owner  uint32      `protobuf:"varint,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Caster uint32      `protobuf:"varint,3,opt,name=Caster,proto3" json:"Caster,omitempty"`
	Aura   *BattleAura `protobuf:"bytes,4,opt,name=Aura" json:"Aura,omitempty"`
	Obtain bool        `protobuf:"varint,5,opt,name=Obtain,proto3" json:"Obtain,omitempty"`
}

func (m *BattleEventAura) Reset()                    { *m = BattleEventAura{} }
func (m *BattleEventAura) String() string            { return proto.CompactTextString(m) }
func (*BattleEventAura) ProtoMessage()               {}
func (*BattleEventAura) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{8} }

func (m *BattleEventAura) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventAura) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *BattleEventAura) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventAura) GetAura() *BattleAura {
	if m != nil {
		return m.Aura
	}
	return nil
}

func (m *BattleEventAura) GetObtain() bool {
	if m != nil {
		return m.Obtain
	}
	return false
}

// 伤害事件
type BattleEventHurt struct {
	Time   uint32 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Caster uint32 `protobuf:"varint,2,opt,name=Caster,proto3" json:"Caster,omitempty"`
	Target uint32 `protobuf:"varint,3,opt,name=Target,proto3" json:"Target,omitempty"`
	Hurt   uint32 `protobuf:"varint,4,opt,name=Hurt,proto3" json:"Hurt,omitempty"`
	Crit   uint32 `protobuf:"varint,5,opt,name=Crit,proto3" json:"Crit,omitempty"`
	Type   uint32 `protobuf:"varint,6,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *BattleEventHurt) Reset()                    { *m = BattleEventHurt{} }
func (m *BattleEventHurt) String() string            { return proto.CompactTextString(m) }
func (*BattleEventHurt) ProtoMessage()               {}
func (*BattleEventHurt) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{9} }

func (m *BattleEventHurt) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventHurt) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventHurt) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *BattleEventHurt) GetHurt() uint32 {
	if m != nil {
		return m.Hurt
	}
	return 0
}

func (m *BattleEventHurt) GetCrit() uint32 {
	if m != nil {
		return m.Crit
	}
	return 0
}

func (m *BattleEventHurt) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 光环效果事件
type BattleEventAuraEffect struct {
	Time   uint32 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Owner  uint32 `protobuf:"varint,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Caster uint32 `protobuf:"varint,3,opt,name=Caster,proto3" json:"Caster,omitempty"`
	Type   uint32 `protobuf:"varint,4,opt,name=Type,proto3" json:"Type,omitempty"`
	Arg1   int32  `protobuf:"varint,5,opt,name=Arg1,proto3" json:"Arg1,omitempty"`
	Arg2   int32  `protobuf:"varint,6,opt,name=Arg2,proto3" json:"Arg2,omitempty"`
	Arg3   int32  `protobuf:"varint,7,opt,name=Arg3,proto3" json:"Arg3,omitempty"`
	Arg4   int32  `protobuf:"varint,8,opt,name=Arg4,proto3" json:"Arg4,omitempty"`
}

func (m *BattleEventAuraEffect) Reset()                    { *m = BattleEventAuraEffect{} }
func (m *BattleEventAuraEffect) String() string            { return proto.CompactTextString(m) }
func (*BattleEventAuraEffect) ProtoMessage()               {}
func (*BattleEventAuraEffect) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{10} }

func (m *BattleEventAuraEffect) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BattleEventAuraEffect) GetOwner() uint32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *BattleEventAuraEffect) GetCaster() uint32 {
	if m != nil {
		return m.Caster
	}
	return 0
}

func (m *BattleEventAuraEffect) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg1() int32 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg2() int32 {
	if m != nil {
		return m.Arg2
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg3() int32 {
	if m != nil {
		return m.Arg3
	}
	return 0
}

func (m *BattleEventAuraEffect) GetArg4() int32 {
	if m != nil {
		return m.Arg4
	}
	return 0
}

type BattleResult struct {
	Win    bool                     `protobuf:"varint,1,opt,name=Win,proto3" json:"Win,omitempty"`
	Units  []*BattleUnit            `protobuf:"bytes,2,rep,name=Units" json:"Units,omitempty"`
	Skill  []*BattleEventSkill      `protobuf:"bytes,3,rep,name=Skill" json:"Skill,omitempty"`
	Aura   []*BattleEventAura       `protobuf:"bytes,4,rep,name=Aura" json:"Aura,omitempty"`
	Hurt   []*BattleEventHurt       `protobuf:"bytes,5,rep,name=Hurt" json:"Hurt,omitempty"`
	Effect []*BattleEventAuraEffect `protobuf:"bytes,6,rep,name=Effect" json:"Effect,omitempty"`
}

func (m *BattleResult) Reset()                    { *m = BattleResult{} }
func (m *BattleResult) String() string            { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()               {}
func (*BattleResult) Descriptor() ([]byte, []int) { return fileDescriptor0Type, []int{11} }

func (m *BattleResult) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *BattleResult) GetUnits() []*BattleUnit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *BattleResult) GetSkill() []*BattleEventSkill {
	if m != nil {
		return m.Skill
	}
	return nil
}

func (m *BattleResult) GetAura() []*BattleEventAura {
	if m != nil {
		return m.Aura
	}
	return nil
}

func (m *BattleResult) GetHurt() []*BattleEventHurt {
	if m != nil {
		return m.Hurt
	}
	return nil
}

func (m *BattleResult) GetEffect() []*BattleEventAuraEffect {
	if m != nil {
		return m.Effect
	}
	return nil
}

func init() {
	proto.RegisterType((*Item)(nil), "msg.Item")
	proto.RegisterType((*Skill)(nil), "msg.Skill")
	proto.RegisterType((*Aura)(nil), "msg.Aura")
	proto.RegisterType((*Hero)(nil), "msg.Hero")
	proto.RegisterType((*BattleSkill)(nil), "msg.BattleSkill")
	proto.RegisterType((*BattleAura)(nil), "msg.BattleAura")
	proto.RegisterType((*BattleUnit)(nil), "msg.BattleUnit")
	proto.RegisterType((*BattleEventSkill)(nil), "msg.BattleEventSkill")
	proto.RegisterType((*BattleEventAura)(nil), "msg.BattleEventAura")
	proto.RegisterType((*BattleEventHurt)(nil), "msg.BattleEventHurt")
	proto.RegisterType((*BattleEventAuraEffect)(nil), "msg.BattleEventAuraEffect")
	proto.RegisterType((*BattleResult)(nil), "msg.BattleResult")
}
func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Flag))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Cnt))
	}
	return i, nil
}

func (m *Skill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Skill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Aura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Hero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hero) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Level))
	}
	if m.RefineLv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.RefineLv))
	}
	if m.RefineTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.RefineTimes))
	}
	if m.RefineSuper {
		dAtA[i] = 0x28
		i++
		if m.RefineSuper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Active) > 0 {
		for _, msg := range m.Active {
			dAtA[i] = 0x32
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Passive) > 0 {
		for _, msg := range m.Passive {
			dAtA[i] = 0x3a
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Power != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Power))
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Status))
	}
	if m.LifePoint != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.LifePoint))
	}
	if m.LifePointMax != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.LifePointMax))
	}
	return i, nil
}

func (m *BattleSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleAura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleAura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *BattleUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Lv))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Pos))
	}
	if m.Attacker != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Attacker))
	}
	if m.Apm != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Apm))
	}
	if m.Atk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Atk))
	}
	if m.Def != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Def))
	}
	if m.Hp != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Hp))
	}
	if m.Crit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Crit))
	}
	if m.Hurt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Hurt))
	}
	if m.Comm != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Comm.Size()))
		n1, err := m.Comm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Skill) > 0 {
		for _, msg := range m.Skill {
			dAtA[i] = 0x6a
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BattleEventSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventSkill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Time))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Caster))
	}
	if m.Skill != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Skill.Size()))
		n2, err := m.Skill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Targets) > 0 {
		dAtA4 := make([]byte, len(m.Targets)*10)
		var j3 int
		for _, num := range m.Targets {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarint0Type(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *BattleEventAura) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventAura) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Time))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Owner))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Caster))
	}
	if m.Aura != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Aura.Size()))
		n5, err := m.Aura.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Obtain {
		dAtA[i] = 0x28
		i++
		if m.Obtain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BattleEventHurt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventHurt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Time))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Caster))
	}
	if m.Target != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Target))
	}
	if m.Hurt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Hurt))
	}
	if m.Crit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Crit))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *BattleEventAuraEffect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleEventAuraEffect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Time))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Owner))
	}
	if m.Caster != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Caster))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Type))
	}
	if m.Arg1 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarint0Type(dAtA, i, uint64(m.Arg4))
	}
	return i, nil
}

func (m *BattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Win {
		dAtA[i] = 0x8
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0x12
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Skill) > 0 {
		for _, msg := range m.Skill {
			dAtA[i] = 0x1a
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Aura) > 0 {
		for _, msg := range m.Aura {
			dAtA[i] = 0x22
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Hurt) > 0 {
		for _, msg := range m.Hurt {
			dAtA[i] = 0x2a
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Effect) > 0 {
		for _, msg := range m.Effect {
			dAtA[i] = 0x32
			i++
			i = encodeVarint0Type(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarint0Type(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Item) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sov0Type(uint64(m.Flag))
	}
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Cnt != 0 {
		n += 1 + sov0Type(uint64(m.Cnt))
	}
	return n
}

func (m *Skill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sov0Type(uint64(m.Level))
	}
	return n
}

func (m *Aura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sov0Type(uint64(m.Level))
	}
	return n
}

func (m *Hero) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sov0Type(uint64(m.Level))
	}
	if m.RefineLv != 0 {
		n += 1 + sov0Type(uint64(m.RefineLv))
	}
	if m.RefineTimes != 0 {
		n += 1 + sov0Type(uint64(m.RefineTimes))
	}
	if m.RefineSuper {
		n += 2
	}
	if len(m.Active) > 0 {
		for _, e := range m.Active {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if len(m.Passive) > 0 {
		for _, e := range m.Passive {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if m.Power != 0 {
		n += 1 + sov0Type(uint64(m.Power))
	}
	if m.Status != 0 {
		n += 1 + sov0Type(uint64(m.Status))
	}
	if m.LifePoint != 0 {
		n += 1 + sov0Type(uint64(m.LifePoint))
	}
	if m.LifePointMax != 0 {
		n += 1 + sov0Type(uint64(m.LifePointMax))
	}
	return n
}

func (m *BattleSkill) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sov0Type(uint64(m.Lv))
	}
	return n
}

func (m *BattleAura) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sov0Type(uint64(m.Lv))
	}
	return n
}

func (m *BattleUnit) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sov0Type(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sov0Type(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sov0Type(uint64(m.Lv))
	}
	if m.Pos != 0 {
		n += 1 + sov0Type(uint64(m.Pos))
	}
	if m.Attacker != 0 {
		n += 1 + sov0Type(uint64(m.Attacker))
	}
	if m.Apm != 0 {
		n += 1 + sov0Type(uint64(m.Apm))
	}
	if m.Atk != 0 {
		n += 1 + sov0Type(uint64(m.Atk))
	}
	if m.Def != 0 {
		n += 1 + sov0Type(uint64(m.Def))
	}
	if m.Hp != 0 {
		n += 1 + sov0Type(uint64(m.Hp))
	}
	if m.Crit != 0 {
		n += 1 + sov0Type(uint64(m.Crit))
	}
	if m.Hurt != 0 {
		n += 1 + sov0Type(uint64(m.Hurt))
	}
	if m.Comm != nil {
		l = m.Comm.Size()
		n += 1 + l + sov0Type(uint64(l))
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	return n
}

func (m *BattleEventSkill) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sov0Type(uint64(m.Time))
	}
	if m.Caster != 0 {
		n += 1 + sov0Type(uint64(m.Caster))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sov0Type(uint64(l))
	}
	if len(m.Targets) > 0 {
		l = 0
		for _, e := range m.Targets {
			l += sov0Type(uint64(e))
		}
		n += 1 + sov0Type(uint64(l)) + l
	}
	return n
}

func (m *BattleEventAura) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sov0Type(uint64(m.Time))
	}
	if m.Owner != 0 {
		n += 1 + sov0Type(uint64(m.Owner))
	}
	if m.Caster != 0 {
		n += 1 + sov0Type(uint64(m.Caster))
	}
	if m.Aura != nil {
		l = m.Aura.Size()
		n += 1 + l + sov0Type(uint64(l))
	}
	if m.Obtain {
		n += 2
	}
	return n
}

func (m *BattleEventHurt) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sov0Type(uint64(m.Time))
	}
	if m.Caster != 0 {
		n += 1 + sov0Type(uint64(m.Caster))
	}
	if m.Target != 0 {
		n += 1 + sov0Type(uint64(m.Target))
	}
	if m.Hurt != 0 {
		n += 1 + sov0Type(uint64(m.Hurt))
	}
	if m.Crit != 0 {
		n += 1 + sov0Type(uint64(m.Crit))
	}
	if m.Type != 0 {
		n += 1 + sov0Type(uint64(m.Type))
	}
	return n
}

func (m *BattleEventAuraEffect) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sov0Type(uint64(m.Time))
	}
	if m.Owner != 0 {
		n += 1 + sov0Type(uint64(m.Owner))
	}
	if m.Caster != 0 {
		n += 1 + sov0Type(uint64(m.Caster))
	}
	if m.Type != 0 {
		n += 1 + sov0Type(uint64(m.Type))
	}
	if m.Arg1 != 0 {
		n += 1 + sov0Type(uint64(m.Arg1))
	}
	if m.Arg2 != 0 {
		n += 1 + sov0Type(uint64(m.Arg2))
	}
	if m.Arg3 != 0 {
		n += 1 + sov0Type(uint64(m.Arg3))
	}
	if m.Arg4 != 0 {
		n += 1 + sov0Type(uint64(m.Arg4))
	}
	return n
}

func (m *BattleResult) Size() (n int) {
	var l int
	_ = l
	if m.Win {
		n += 2
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if len(m.Skill) > 0 {
		for _, e := range m.Skill {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if len(m.Aura) > 0 {
		for _, e := range m.Aura {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if len(m.Hurt) > 0 {
		for _, e := range m.Hurt {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	if len(m.Effect) > 0 {
		for _, e := range m.Effect {
			l = e.Size()
			n += 1 + l + sov0Type(uint64(l))
		}
	}
	return n
}

func sov0Type(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func soz0Type(x uint64) (n int) {
	return sov0Type(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Skill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Skill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Skill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Aura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineLv", wireType)
			}
			m.RefineLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefineLv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineTimes", wireType)
			}
			m.RefineTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefineTimes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefineSuper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RefineSuper = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = append(m.Active, &Skill{})
			if err := m.Active[len(m.Active)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passive = append(m.Passive, &Skill{})
			if err := m.Passive[len(m.Passive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePoint", wireType)
			}
			m.LifePoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePoint |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifePointMax", wireType)
			}
			m.LifePointMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifePointMax |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleAura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleAura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleAura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			m.Attacker = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attacker |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apm", wireType)
			}
			m.Apm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Apm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			m.Atk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Def", wireType)
			}
			m.Def = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Def |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crit", wireType)
			}
			m.Crit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			m.Hurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comm == nil {
				m.Comm = &BattleSkill{}
			}
			if err := m.Comm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &BattleSkill{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &BattleSkill{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflow0Type
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Targets = append(m.Targets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflow0Type
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLength0Type
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflow0Type
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Targets = append(m.Targets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventAura) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventAura: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventAura: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aura == nil {
				m.Aura = &BattleAura{}
			}
			if err := m.Aura.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Obtain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Obtain = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventHurt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventHurt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventHurt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			m.Hurt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hurt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crit", wireType)
			}
			m.Crit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleEventAuraEffect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleEventAuraEffect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleEventAuraEffect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caster", wireType)
			}
			m.Caster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caster |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			m.Arg1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg2", wireType)
			}
			m.Arg2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg3", wireType)
			}
			m.Arg3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg4", wireType)
			}
			m.Arg4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arg4 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &BattleUnit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skill = append(m.Skill, &BattleEventSkill{})
			if err := m.Skill[len(m.Skill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aura", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aura = append(m.Aura, &BattleEventAura{})
			if err := m.Aura[len(m.Aura)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hurt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hurt = append(m.Hurt, &BattleEventHurt{})
			if err := m.Hurt[len(m.Hurt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLength0Type
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effect = append(m.Effect, &BattleEventAuraEffect{})
			if err := m.Effect[len(m.Effect)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skip0Type(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLength0Type
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skip0Type(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflow0Type
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflow0Type
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLength0Type
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflow0Type
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skip0Type(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLength0Type = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflow0Type   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("0.type.proto", fileDescriptor0Type) }

var fileDescriptor0Type = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4a, 0x1b, 0x5d,
	0x14, 0xfd, 0xe6, 0x37, 0x71, 0x27, 0xd1, 0x70, 0x50, 0x39, 0xc8, 0x47, 0x08, 0x53, 0x5b, 0x06,
	0xaa, 0xa1, 0x8d, 0x5e, 0xf6, 0x26, 0xa6, 0x96, 0x08, 0x29, 0x86, 0xa3, 0xa5, 0xd7, 0xa3, 0x9e,
	0x84, 0x21, 0x99, 0x1f, 0x66, 0x4e, 0x62, 0xbd, 0xeb, 0x23, 0xd8, 0xd7, 0xe8, 0x3b, 0xf4, 0xb6,
	0xf4, 0xb2, 0x8f, 0x50, 0xec, 0x6b, 0xf4, 0xa2, 0x9c, 0x9f, 0xf9, 0x89, 0xa6, 0x60, 0xa1, 0x77,
	0x7b, 0xaf, 0xbd, 0x9c, 0x59, 0xb3, 0xd7, 0xda, 0x06, 0xea, 0x2f, 0x3a, 0xec, 0x26, 0xa6, 0x9d,
	0x38, 0x89, 0x58, 0x84, 0x8c, 0x20, 0x9d, 0x38, 0xaf, 0xc0, 0x3c, 0x61, 0x34, 0x40, 0x08, 0xcc,
	0x37, 0x33, 0x6f, 0x82, 0xb5, 0xb6, 0xe6, 0x36, 0x88, 0xa8, 0xd1, 0x3a, 0xe8, 0x27, 0x57, 0x58,
	0x17, 0x88, 0x7e, 0x72, 0x85, 0x9a, 0x60, 0xf4, 0x43, 0x86, 0x8d, 0xb6, 0xe6, 0x1a, 0x84, 0x97,
	0xce, 0x3e, 0x58, 0x67, 0x53, 0x7f, 0x36, 0x53, 0x54, 0x2d, 0xa7, 0x6e, 0x82, 0x35, 0xa4, 0x0b,
	0x3a, 0x53, 0x7f, 0x2d, 0x1b, 0x67, 0x0f, 0xcc, 0xde, 0x3c, 0xf1, 0x1e, 0xc9, 0xfe, 0xaa, 0x83,
	0x39, 0xa0, 0x49, 0xf4, 0x38, 0x3a, 0xda, 0x81, 0x2a, 0xa1, 0x63, 0x3f, 0xa4, 0xc3, 0x85, 0x90,
	0xd8, 0x20, 0x79, 0x8f, 0xda, 0x50, 0x93, 0xf5, 0xb9, 0x1f, 0xd0, 0x14, 0x9b, 0x62, 0x5c, 0x86,
	0x0a, 0xc6, 0xd9, 0x3c, 0xa6, 0x09, 0xb6, 0xda, 0x9a, 0x5b, 0x25, 0x65, 0x08, 0x39, 0x60, 0xf7,
	0x2e, 0x99, 0xbf, 0xa0, 0xd8, 0x6e, 0x1b, 0x6e, 0xad, 0x0b, 0x9d, 0x20, 0x9d, 0x74, 0xc4, 0xe7,
	0x13, 0x35, 0x41, 0xbb, 0x50, 0x19, 0x79, 0x69, 0xca, 0x49, 0x95, 0x07, 0xa4, 0x6c, 0xc4, 0xf5,
	0x8f, 0xa2, 0x6b, 0x9a, 0xe0, 0xaa, 0xd4, 0x2f, 0x1a, 0xb4, 0x0d, 0xf6, 0x19, 0xf3, 0xd8, 0x3c,
	0xc5, 0x6b, 0x02, 0x56, 0x1d, 0xfa, 0x1f, 0xd6, 0x86, 0xfe, 0x98, 0x8e, 0x22, 0x3f, 0x64, 0x18,
	0xc4, 0xa8, 0x00, 0x90, 0x03, 0xf5, 0xbc, 0x79, 0xeb, 0x7d, 0xc0, 0x35, 0x41, 0x58, 0xc2, 0x9c,
	0x7d, 0xa8, 0x1d, 0x79, 0x8c, 0xcd, 0xe8, 0x6a, 0xaf, 0xd6, 0x41, 0x1f, 0x2e, 0x32, 0x9b, 0x87,
	0x0b, 0x67, 0x0f, 0x40, 0xd2, 0x57, 0x7a, 0x75, 0x9f, 0xfd, 0x59, 0xcf, 0xe8, 0xef, 0x42, 0x9f,
	0xf1, 0x1c, 0x9d, 0xdf, 0xc4, 0x34, 0xcb, 0x11, 0xaf, 0x1f, 0xe4, 0x48, 0x3e, 0xc2, 0xc8, 0x1e,
	0xc1, 0x73, 0x35, 0x8a, 0x32, 0x57, 0x78, 0xc9, 0xbd, 0xec, 0x31, 0xe6, 0x5d, 0x4e, 0x95, 0x15,
	0x0d, 0x92, 0xf7, 0x9c, 0xdd, 0x8b, 0x03, 0x6c, 0x4b, 0x76, 0x2f, 0x0e, 0x04, 0xc2, 0xa6, 0xb8,
	0xa2, 0x10, 0x36, 0xe5, 0xc8, 0x6b, 0x3a, 0x56, 0xfb, 0xe5, 0x25, 0x7f, 0xe7, 0x20, 0x56, 0x9b,
	0xd5, 0x07, 0x31, 0xd7, 0xd9, 0x4f, 0xfc, 0x6c, 0xa1, 0xa2, 0xe6, 0xd8, 0x60, 0x9e, 0x30, 0xb5,
	0x43, 0x51, 0xa3, 0x5d, 0x30, 0xfb, 0x51, 0x10, 0xe0, 0x7a, 0x5b, 0x73, 0x6b, 0xdd, 0xa6, 0xb0,
	0xb3, 0xb4, 0x4c, 0x22, 0xa6, 0xe8, 0x99, 0xba, 0x03, 0xdc, 0x10, 0xae, 0x3f, 0xa4, 0xc9, 0xb1,
	0xf3, 0x51, 0x83, 0xa6, 0x84, 0x8f, 0x17, 0x34, 0x64, 0xd2, 0x0f, 0xbe, 0x32, 0x3f, 0x28, 0x56,
	0xe6, 0x07, 0x94, 0x87, 0xa1, 0xef, 0xa5, 0x8c, 0x26, 0x6a, 0x6d, 0xaa, 0x2b, 0x5e, 0x64, 0xfc,
	0x41, 0x8f, 0xba, 0x47, 0x0c, 0x95, 0x73, 0x2f, 0x99, 0x50, 0xc6, 0xd7, 0x6a, 0xb8, 0x0d, 0x92,
	0xb5, 0xce, 0xad, 0x06, 0x1b, 0x25, 0x09, 0xc2, 0xe3, 0x55, 0x0a, 0x36, 0xc1, 0x3a, 0xbd, 0x0e,
	0x73, 0x01, 0xb2, 0x29, 0xe9, 0x32, 0x96, 0x74, 0x3d, 0x91, 0x97, 0x2d, 0x3c, 0xac, 0x75, 0x37,
	0x4a, 0xb2, 0x38, 0x4c, 0xe4, 0xd9, 0x6f, 0x83, 0x7d, 0x7a, 0xc1, 0x3c, 0x3f, 0x54, 0xe7, 0xa5,
	0x3a, 0xe7, 0xd3, 0xb2, 0x24, 0xb1, 0xf7, 0xbf, 0x59, 0xca, 0x36, 0xd8, 0xf2, 0xeb, 0x32, 0x51,
	0xb2, 0xcb, 0xfd, 0x34, 0x4b, 0x7e, 0x66, 0xbe, 0x5b, 0xcb, 0xbe, 0x8b, 0xcc, 0xda, 0x45, 0x66,
	0x9d, 0x2f, 0x1a, 0x6c, 0xdd, 0x5b, 0xd3, 0xf1, 0x78, 0x4c, 0x2f, 0xd9, 0x3f, 0x58, 0x56, 0xf6,
	0x3e, 0xb3, 0x74, 0x23, 0x08, 0xcc, 0x5e, 0x32, 0x79, 0x29, 0x74, 0x59, 0x44, 0xd4, 0x0a, 0xeb,
	0x0a, 0x5d, 0x12, 0xeb, 0x2a, 0xec, 0x40, 0x84, 0x5d, 0x62, 0x07, 0x0a, 0x3b, 0x14, 0x71, 0x97,
	0xd8, 0xa1, 0xf3, 0x4b, 0x83, 0xba, 0xd4, 0x4f, 0x68, 0x3a, 0x9f, 0x31, 0x7e, 0x12, 0xef, 0xfd,
	0x50, 0xa8, 0xae, 0x12, 0x5e, 0xa2, 0xa7, 0x60, 0xf1, 0x93, 0x4d, 0xb1, 0x2e, 0x42, 0x5b, 0x36,
	0x8d, 0xe3, 0x44, 0x4e, 0xd1, 0xf3, 0x22, 0x72, 0x9c, 0xb6, 0x55, 0xa2, 0x15, 0x21, 0xce, 0x72,
	0xe7, 0xe6, 0x39, 0xe0, 0xdc, 0xcd, 0xfb, 0xdc, 0x52, 0x18, 0x5c, 0x65, 0x8e, 0xb5, 0x9a, 0xc9,
	0x67, 0xca, 0xb2, 0x2e, 0xd8, 0x72, 0xf5, 0xea, 0x1f, 0xef, 0xce, 0xaa, 0xa7, 0x4a, 0x06, 0x51,
	0xcc, 0xa3, 0xe6, 0xb7, 0xbb, 0x96, 0xf6, 0xfd, 0xae, 0xa5, 0xfd, 0xb8, 0x6b, 0x69, 0xb7, 0x3f,
	0x5b, 0xff, 0x5d, 0xd8, 0xe2, 0x47, 0xef, 0xe0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xb9,
	0x27, 0x16, 0x04, 0x07, 0x00, 0x00,
}
