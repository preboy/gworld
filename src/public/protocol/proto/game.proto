syntax = "proto3";

package msg;

// ----------------------------------------------------------------------------
// common

message Item {
    uint32  flag                = 1;    // 0:该道具总数量  1:变化量
    uint32  id                  = 2;
    int64   cnt                 = 3;
}


// ----------------------------------------------------------------------------
// base
message PlayerLvExpUpdate {
    uint32  lv                  = 1;
    uint64  exp                 = 2;
}


// ----------------------------------------------------------------------------

message PlayerDataRequest {
    uint64  id                  = 1;
}

message Skill {
    uint32  id                  = 1;
    uint32  level               = 2;
}

message Aura {
    uint32  id                  = 1;
    uint32  level               = 2;
}

message Hero {
    uint32  id                  = 1;
    uint32  level               = 2;
    uint32  refineLv            = 3;
    uint32  refineTimes         = 4;
    bool    refineSuper         = 5;
    repeated Skill  active      = 6;
    repeated Skill  passive     = 7;
    uint32  power               = 8;
    uint32  status              = 9;
    uint32  lifePoint           = 10;
    uint32  lifePointMax        = 11;
}


message PlayerDataResponse {
    string  acct                = 1;
    string  name                = 2;
    string  pid                 = 3;
    uint32  sid                 = 4;
    uint64  id                  = 5;
    uint32  level               = 6;
    uint32  vipLevel            = 7;
    bool    male                = 8;
    repeated Item   items       = 9;
    repeated Hero   heros       = 10;
    repeated Aura   auras       = 11;
}


message GMCommandRequest {
    string  command             = 1;
}

message GMCommandResponse {
    int32   result              = 1;
}


message NoticeRequest {
    int32   flag                = 1;
    string  notice              = 2;
}

message NoticeResponse {
    int32   flag                = 1;
    string  notice              = 2;
}

// ----------------------------------------------------------------------------
// Battle

message BattleSkill {
    uint32  id                  = 1;
    uint32  lv                  = 2;
}

message BattleAura {
    uint32  id                  = 1;
    uint32  lv                  = 2;
}

message BattleUnit {
    uint32  type                = 1;    // 生物类型
    uint32  id                  = 2;    // 英雄/怪物ID
    uint32  lv                  = 3;    // 等级
    uint32  pos                 = 4;    // 位置
    uint32  attacker            = 5;    // 是否攻击方
    uint32  apm                 = 6;    // apm
    uint32  atk                 = 7;    // 攻击
    uint32  def                 = 8;    // 防御
    uint32  hp                  = 9;    // HP当前
    uint32  crit                = 10;   // 暴击
    uint32  hurt                = 11;   // 暴伤
    BattleSkill comm            = 12;   // 普攻
    repeated BattleSkill skill  = 13;   // 技能
}

// 技能释放事件
message BattleEventSkill {
    uint32          time                = 1;    // 时间
    uint32          caster              = 2;    // 释法者
    BattleSkill     skill               = 3;    // 技能信息
    repeated uint32 targets             = 4;    // 目标
}

// 光环事件
message BattleEventAura {
    uint32          time                = 1;    // 时间
    uint32          owner               = 2;    // 光环获得者
    uint32          caster              = 3;    // 谁释放的光环
    BattleAura      aura                = 4;    // 光环信息
    bool            obtain              = 5;    // true:获得光环  false:失去光环
}

// 伤害事件
message BattleEventHurt {
    uint32          time                = 1;    // 时间
    uint32          caster              = 2;    // 攻击者
    uint32          target              = 3;    // 目标
    uint32          hurt                = 4;    // 伤害量
    uint32          crit                = 5;    // 是否暴击
    uint32          type                = 6;    // 攻击、反弹、溅射
}

// 光环效果事件
message BattleEventAuraEffect {
    uint32          time                = 1;    // 时间
    uint32          owner               = 2;    // 光环获得者
    uint32          caster              = 3;    // 谁释放的光环
    uint32          type                = 4;    // 事件类型
    int32           arg1                = 5;    //
    int32           arg2                = 6;    //
    int32           arg3                = 7;    //
    int32           arg4                = 8;    //
}

message BattleResult {
    bool                            win                 = 1;    // 攻击者是否获胜
    repeated BattleUnit             units               = 2;    // 所有参战人员
    repeated BattleEventSkill       skill               = 3;
    repeated BattleEventAura        aura                = 4;
    repeated BattleEventHurt        hurt                = 5;
    repeated BattleEventAuraEffect  effect              = 6;
}

message MakeBattleRequest {
    uint32  id                  = 1;    // monster team ID
}

message MakeBattleResponse {
    BattleResult    result      = 1;    // 战斗结果
}

// 使用道具
message UseItemRequest {
    uint32  id                  = 1;    // 道具ID
    uint32  cnt                 = 2;    // 数量
    int32   arg1                = 3;    // 参数
    int32   arg2                = 4;    // 参数
}

message UseItemResponse {
    uint32    result            = 1;    // 结果
}

message ItemCntInfo {
    uint32  add                 = 1;    // 0:总量 1:增加 2:减少
    uint32  id                  = 2;
    uint64  cnt                 = 3;
}

message ItemCntChangedNotice {
    repeated ItemCntInfo info   = 1;
}

message MarketBuyRequest {
    uint32  index               = 1;    // 购买的索引
    uint64  count               = 2;    // 数量
}

message MarketBuyResponse {
    uint32 ErrorCode           = 1;
}


// ----------------------------------------------------------------------------
// 英雄养成

message HeroLevelupRequest {
    uint32  hero_id             = 1;
}

message HeroLevelupResponse {
    uint32 ErrorCode            = 1;
}

message HeroRefineRequest {
    uint32  hero_id             = 1;
    uint32  super               = 2;    // 1:普通精炼  0:超级精炼
}

message HeroRefineResponse {
    uint32 ErrorCode            = 1;
    uint32 result               = 2;    // ErrorCode为0时，操作是否成功
}

message HeroInfoUpdateResponse {
    Hero   hero                 = 1;
}

// ----------------------------------------------------------------------------
// quest

message QuestData {
    int32 key   = 1;
    int32 val   = 2;
}

message QuestInfo {
    uint32              id      = 1;    // 任务ID
    uint32              task    = 2;    // 当前的task项   0:表示已完成所有的task项
    repeated QuestData  data    = 3;    // 任务数据
}

message QuestListRequest {
}

message QuestListResponse {
    repeated QuestInfo  quests  = 1;
}

// 任务操作
message QuestOpRequest {
    uint32 id   = 1;    // 任务ID
    uint32 op   = 2;    // 1:接受 2:放弃 3:提交  4:完成  
    uint32 r    = 3;    // 提交任务的参数
}

message QuestOpResponse {
    uint32 id   = 1;    // 任务ID
    uint32 op   = 2;    // 1:接受 2:放弃 3:提交  4:完成  
    uint32 r    = 3;    // 提交任务的参数
    uint32      ErrorCode   = 4;
    QuestInfo   quest       = 5;
}

// 任务变更推送(由服务端产生变化时推送)
message QuestUpdate {
    repeated QuestInfo  quests  = 1;
}

// ----------------------------------------------------------------------------
// chapter

message ChapterInfo {
    int64  LootTs               = 1;
    uint32 BreakId              = 2;
    repeated uint32 Chapters    = 3;
}

// 拉取关卡信息
message ChapterInfoRequest {
}

message ChapterInfoResponse {
    uint32  ErrorCode       = 1;
    ChapterInfo Info        = 2;
}

// 关卡战斗
message ChapterFightingRequest {
    repeated uint32 Team    = 1;    // 战斗队伍
}

message ChapterFightingResponse {
    uint32  ErrorCode       = 1;
    bool    Win             = 2;    // 是否胜利
    repeated Item   Rewards = 3;    // 奖励
    ChapterInfo Info        = 4;
}

// 领取章节奖励
message ChapterRewardsRequest {
    uint32 Id               = 1;    // 章节ID
}

message ChapterRewardsResponse {
    uint32 ErrorCode        = 1;
    uint32 Id               = 2;
    repeated Item   Rewards = 3;    // 奖励
    ChapterInfo Info        = 4;
}

// 领取挂机奖励
message ChapterLootRequest {
}

message ChapterLootResponse {
    uint32 ErrorCode        = 1;
    repeated Item   Rewards = 2;    // 奖励
}