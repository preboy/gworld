// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: referee.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		referee.proto

	It has these top-level messages:
		CreateMatchRequest
		CreateMatchResponse
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateMatchRequest struct {
	OP        *int32   `protobuf:"varint,1,req,name=OP,def=7001" json:"OP,omitempty"`
	TotalDeck int32    `protobuf:"varint,2,req,name=TotalDeck" json:"TotalDeck"`
	MatchName string   `protobuf:"bytes,3,req,name=MatchName" json:"MatchName"`
	Gamblers  []string `protobuf:"bytes,4,rep,name=Gamblers" json:"Gamblers,omitempty"`
}

func (m *CreateMatchRequest) Reset()                    { *m = CreateMatchRequest{} }
func (m *CreateMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMatchRequest) ProtoMessage()               {}
func (*CreateMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorReferee, []int{0} }

const Default_CreateMatchRequest_OP int32 = 7001

func (m *CreateMatchRequest) GetOP() int32 {
	if m != nil && m.OP != nil {
		return *m.OP
	}
	return Default_CreateMatchRequest_OP
}

func (m *CreateMatchRequest) GetTotalDeck() int32 {
	if m != nil {
		return m.TotalDeck
	}
	return 0
}

func (m *CreateMatchRequest) GetMatchName() string {
	if m != nil {
		return m.MatchName
	}
	return ""
}

func (m *CreateMatchRequest) GetGamblers() []string {
	if m != nil {
		return m.Gamblers
	}
	return nil
}

type CreateMatchResponse struct {
	OP      *int32 `protobuf:"varint,1,req,name=OP,def=7001" json:"OP,omitempty"`
	ErrCode int32  `protobuf:"varint,2,req,name=errCode" json:"errCode"`
	MatchID int32  `protobuf:"varint,3,req,name=MatchID" json:"MatchID"`
}

func (m *CreateMatchResponse) Reset()                    { *m = CreateMatchResponse{} }
func (m *CreateMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateMatchResponse) ProtoMessage()               {}
func (*CreateMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorReferee, []int{1} }

const Default_CreateMatchResponse_OP int32 = 7001

func (m *CreateMatchResponse) GetOP() int32 {
	if m != nil && m.OP != nil {
		return *m.OP
	}
	return Default_CreateMatchResponse_OP
}

func (m *CreateMatchResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CreateMatchResponse) GetMatchID() int32 {
	if m != nil {
		return m.MatchID
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateMatchRequest)(nil), "pb.CreateMatchRequest")
	proto.RegisterType((*CreateMatchResponse)(nil), "pb.CreateMatchResponse")
}
func (m *CreateMatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OP == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("OP")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReferee(dAtA, i, uint64(*m.OP))
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintReferee(dAtA, i, uint64(m.TotalDeck))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintReferee(dAtA, i, uint64(len(m.MatchName)))
	i += copy(dAtA[i:], m.MatchName)
	if len(m.Gamblers) > 0 {
		for _, s := range m.Gamblers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CreateMatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateMatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OP == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("OP")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReferee(dAtA, i, uint64(*m.OP))
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintReferee(dAtA, i, uint64(m.ErrCode))
	dAtA[i] = 0x18
	i++
	i = encodeVarintReferee(dAtA, i, uint64(m.MatchID))
	return i, nil
}

func encodeVarintReferee(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateMatchRequest) Size() (n int) {
	var l int
	_ = l
	if m.OP != nil {
		n += 1 + sovReferee(uint64(*m.OP))
	}
	n += 1 + sovReferee(uint64(m.TotalDeck))
	l = len(m.MatchName)
	n += 1 + l + sovReferee(uint64(l))
	if len(m.Gamblers) > 0 {
		for _, s := range m.Gamblers {
			l = len(s)
			n += 1 + l + sovReferee(uint64(l))
		}
	}
	return n
}

func (m *CreateMatchResponse) Size() (n int) {
	var l int
	_ = l
	if m.OP != nil {
		n += 1 + sovReferee(uint64(*m.OP))
	}
	n += 1 + sovReferee(uint64(m.ErrCode))
	n += 1 + sovReferee(uint64(m.MatchID))
	return n
}

func sovReferee(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReferee(x uint64) (n int) {
	return sovReferee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateMatchRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReferee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OP", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OP = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeck", wireType)
			}
			m.TotalDeck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDeck |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferee
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gamblers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferee
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gamblers = append(m.Gamblers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReferee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReferee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OP")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("TotalDeck")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MatchName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateMatchResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReferee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateMatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateMatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OP", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OP = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrCode", wireType)
			}
			m.ErrCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchID", wireType)
			}
			m.MatchID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipReferee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReferee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("OP")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("errCode")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MatchID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReferee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReferee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReferee
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReferee
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReferee(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReferee = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReferee   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("referee.proto", fileDescriptorReferee) }

var fileDescriptorReferee = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x4d, 0x4b,
	0x2d, 0x4a, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xea, 0x63,
	0xe4, 0x12, 0x72, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0xf5, 0x4d, 0x2c, 0x49, 0xce, 0x08, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0xf2, 0x0f, 0x90, 0x60, 0x54, 0x60, 0xd2, 0x60,
	0xb5, 0x62, 0x31, 0x37, 0x30, 0x30, 0x0c, 0x62, 0xf2, 0x0f, 0x10, 0x52, 0xe2, 0xe2, 0x0c, 0xc9,
	0x2f, 0x49, 0xcc, 0x71, 0x49, 0x4d, 0xce, 0x96, 0x60, 0x02, 0x49, 0x3a, 0xb1, 0x9c, 0xb8, 0x27,
	0xcf, 0x10, 0x84, 0x10, 0x06, 0xa9, 0x01, 0x9b, 0xe4, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xac, 0xc0,
	0xa4, 0xc1, 0x09, 0x53, 0x03, 0x17, 0x16, 0x92, 0xe2, 0xe2, 0x70, 0x4f, 0xcc, 0x4d, 0xca, 0x49,
	0x2d, 0x2a, 0x96, 0x60, 0x51, 0x60, 0xd6, 0xe0, 0x0c, 0x82, 0xf3, 0x95, 0xb2, 0xb9, 0x84, 0x51,
	0xdc, 0x53, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x8a, 0xc3, 0x41, 0x72, 0x5c, 0xec, 0xa9, 0x45, 0x45,
	0xce, 0xf9, 0x29, 0xa9, 0x28, 0xce, 0x81, 0x09, 0x82, 0xe4, 0xc1, 0xc6, 0x78, 0xba, 0x80, 0x9d,
	0x02, 0x97, 0x87, 0x0a, 0x3a, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa4, 0xfb,
	0x6b, 0x23, 0x01, 0x00, 0x00,
}
